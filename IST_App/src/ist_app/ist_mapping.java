/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ist_app;

import common.MainFrame;
import ist_app.resource.NormaIST;
import ist_app.resource.KomponenPenilaian;
import ist_app.resource.KomponenPenilaianTableModel;
import ist_app.resource.NilaiRubrik;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import ist_app.resource.IST_ScoreInterpreter;
import ist_app.resource.IST_ScoreInterpreter.Result;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPasswordField;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author nicol
 */
public class ist_mapping extends javax.swing.JPanel {

    private MainFrame mainFrame;
    private NormaIST norma;

    private List<KomponenPenilaian> nilai = new ArrayList<>();
    IST_ScoreInterpreter tarKecerdasan, berpikirKompreheren, kemAnalisis, dayaIngat, kreativitas, menilai, mengambilKeputusan, berbahasa, angka;
    LinkedList<String> fleksibel, jenisKecerdasan, coraBerpikir;
    private HashMap<String, String> charNilai = new HashMap<>();
    private HashMap<String, String> nilaiKategori = new HashMap<>();
    private HashMap<String, Integer> nilaiSW = new HashMap<>();

    public void setNilai(List<KomponenPenilaian> nilai) {
        this.nilai = nilai;
    }

    private List<NilaiRubrik> nilaiRubrik = new ArrayList<>();
    String charIQ;
    int pilihan = 0;
    private String nil = "";
    private String Kategori = "";
    private String deskripsi = "";
    private int[] RWScore;

    /**
     * Creates new form ist_mapping
     */
    public ist_mapping(MainFrame mainFrame) {
        this.mainFrame = mainFrame;
        norma = new NormaIST();
        initComponents();
        tombolBatal.setEnabled(false);
        tombolHasil.setEnabled(false);
        tombolCetak.setEnabled(false);
        tombolUbah.setEnabled(true);
        setDate();
        resetTable();
        initializeIntepretations();
        inisiasill();
        text2ll();

        RWScore = new int[9];
    }

    private void setDate() {
        tanggalController.setDate(new Date());
    }

    private void resetTable() {
        nilai = new ArrayList<>();
        try {
            KomponenPenilaianTableModel model = new KomponenPenilaianTableModel(nilai);
            tabelHasil.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Data gagal ditampilkan");
        }

        setTableProperties();
    }

    private void setTableProperties() {
//        tabelHasil.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabelHasil.getColumnModel().getColumn(0).setPreferredWidth(600);
        tabelHasil.getColumnModel().getColumn(1).setPreferredWidth(200);
        tabelHasil.getColumnModel().getColumn(2).setPreferredWidth(200);
        tabelHasil.getColumnModel().getColumn(3).setPreferredWidth(1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        judul = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        masukan = new javax.swing.JPanel();
        namaLabel = new javax.swing.JLabel();
        namaInput = new javax.swing.JTextField();
        SELabel = new javax.swing.JLabel();
        WALabel = new javax.swing.JLabel();
        ANLabel = new javax.swing.JLabel();
        GELabel = new javax.swing.JLabel();
        MELabel = new javax.swing.JLabel();
        RALabel = new javax.swing.JLabel();
        ZRLabel = new javax.swing.JLabel();
        FALabel = new javax.swing.JLabel();
        WULabel = new javax.swing.JLabel();
        FAInput = new javax.swing.JTextField();
        WUInput = new javax.swing.JTextField();
        RAInput = new javax.swing.JTextField();
        ZRInput = new javax.swing.JTextField();
        GEInput = new javax.swing.JTextField();
        MEInput = new javax.swing.JTextField();
        WAInput = new javax.swing.JTextField();
        ANInput = new javax.swing.JTextField();
        SEInput = new javax.swing.JTextField();
        tanggalController = new com.toedter.calendar.JDateChooser();
        namaLabel1 = new javax.swing.JLabel();
        namaLabel2 = new javax.swing.JLabel();
        tgllahirinput = new com.toedter.calendar.JDateChooser();
        controller = new javax.swing.JPanel();
        tombolBatal = new javax.swing.JButton();
        tombolHasil = new javax.swing.JButton();
        tombolCetak = new javax.swing.JButton();
        tombolKeluar = new javax.swing.JButton();
        tombolUbah = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelHasil = new javax.swing.JTable();

        judul.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("IST MAPPING");

        javax.swing.GroupLayout judulLayout = new javax.swing.GroupLayout(judul);
        judul.setLayout(judulLayout);
        judulLayout.setHorizontalGroup(
            judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(judulLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 878, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        judulLayout.setVerticalGroup(
            judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
            .addGroup(judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(judulLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        masukan.setBorder(javax.swing.BorderFactory.createTitledBorder("Masukan"));
        masukan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        namaLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaLabel.setText("Nama");

        namaInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaInputActionPerformed(evt);
            }
        });
        namaInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                namaInputKeyReleased(evt);
            }
        });

        SELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SELabel.setText("SE");

        WALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WALabel.setText("WA");

        ANLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ANLabel.setText("AN");

        GELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GELabel.setText("GE");

        MELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MELabel.setText("ME");

        RALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RALabel.setText("RA");

        ZRLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ZRLabel.setText("ZR");

        FALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FALabel.setText("FA");

        WULabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WULabel.setText("WU");

        FAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FAInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                FAInputFocusLost(evt);
            }
        });

        WUInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WUInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                WUInputFocusLost(evt);
            }
        });

        RAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RAInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                RAInputFocusLost(evt);
            }
        });

        ZRInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ZRInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ZRInputFocusLost(evt);
            }
        });

        GEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GEInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                GEInputFocusLost(evt);
            }
        });

        MEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MEInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                MEInputFocusLost(evt);
            }
        });

        WAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WAInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                WAInputFocusLost(evt);
            }
        });

        ANInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ANInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                ANInputFocusLost(evt);
            }
        });

        SEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SEInput.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                SEInputFocusLost(evt);
            }
        });

        tanggalController.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tanggalControllerKeyReleased(evt);
            }
        });

        namaLabel1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaLabel1.setText("Tanggal Tes");

        namaLabel2.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaLabel2.setText("Tanggal lahir");

        tgllahirinput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tgllahirinputKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout masukanLayout = new javax.swing.GroupLayout(masukan);
        masukan.setLayout(masukanLayout);
        masukanLayout.setHorizontalGroup(
            masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(masukanLayout.createSequentialGroup()
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(masukanLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(namaLabel1)
                            .addComponent(namaLabel)
                            .addComponent(namaLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tanggalController, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(namaInput, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tgllahirinput, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(masukanLayout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addComponent(SELabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(SEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WALabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ANLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ANInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(WAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MELabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GELabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(GEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(masukanLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(RALabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, masukanLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(ZRLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ZRInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(RAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FALabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WULabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WUInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(FAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(230, Short.MAX_VALUE))
        );
        masukanLayout.setVerticalGroup(
            masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(masukanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(namaLabel)
                    .addComponent(namaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(namaLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tgllahirinput, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(namaLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tanggalController, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FALabel)
                    .addComponent(RAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RALabel)
                    .addComponent(GEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GELabel)
                    .addComponent(WAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WALabel))
                .addGap(7, 7, 7)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WUInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WULabel)
                    .addComponent(ZRInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ZRLabel)
                    .addComponent(MEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MELabel)
                    .addComponent(ANInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ANLabel)
                    .addComponent(SEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SELabel))
                .addGap(10, 10, 10))
        );

        controller.setBorder(javax.swing.BorderFactory.createTitledBorder("Aksi"));

        tombolBatal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolBatal.setText("Batal");
        tombolBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolBatalActionPerformed(evt);
            }
        });

        tombolHasil.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolHasil.setText("Hasil");
        tombolHasil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolHasilActionPerformed(evt);
            }
        });

        tombolCetak.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolCetak.setText("Cetak");
        tombolCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolCetakActionPerformed(evt);
            }
        });

        tombolKeluar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolKeluar.setText("Keluar");
        tombolKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolKeluarActionPerformed(evt);
            }
        });

        tombolUbah.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolUbah.setText("Ubah");
        tombolUbah.setMaximumSize(new java.awt.Dimension(78, 31));
        tombolUbah.setMinimumSize(new java.awt.Dimension(78, 31));
        tombolUbah.setPreferredSize(new java.awt.Dimension(78, 31));
        tombolUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolUbahActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controllerLayout = new javax.swing.GroupLayout(controller);
        controller.setLayout(controllerLayout);
        controllerLayout.setHorizontalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controllerLayout.createSequentialGroup()
                .addContainerGap(119, Short.MAX_VALUE)
                .addComponent(tombolBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolHasil, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolCetak, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolKeluar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        controllerLayout.setVerticalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controllerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tombolBatal)
                        .addComponent(tombolHasil)
                        .addComponent(tombolCetak)
                        .addComponent(tombolKeluar))
                    .addComponent(tombolUbah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        tabelHasil.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tabelHasil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Variabel", "Nilai", "Kategori", "Deskripsi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelHasil.setToolTipText("");
        tabelHasil.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelHasil.setRowHeight(30);
        tabelHasil.setShowHorizontalLines(true);
        tabelHasil.setShowVerticalLines(true);
        tabelHasil.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tabelHasilMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(tabelHasil);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(controller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addComponent(judul, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(masukan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(judul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(masukan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void namaInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_namaInputKeyReleased

    }//GEN-LAST:event_namaInputKeyReleased

    private void tombolBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolBatalActionPerformed
        setDate();
        clearAllComp();
        resetTable();
        tombolHasil.setEnabled(false);
        tombolBatal.setEnabled(false);
        tombolCetak.setEnabled(false);
    }//GEN-LAST:event_tombolBatalActionPerformed

    private void tombolHasilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolHasilActionPerformed
        try {

            //menampilkan hasil dari input ke dalam tabel
            /**
             * IST Mapping aspek yang dipake pada norma: - AN - FA - GE - ME -
             * RA - SE - WA - WU - ZR - GESAMT (untuk dapetin IQ)
             *
             * keknya perlu bikin input proses masing-masing nilai diatas buat
             * hitung skornya
             *
             * note: - skor jenis kecerdasan dan berpikir fleksibel sama -
             * bagaimana cara dapetin skor sw dari tabel yg terbaru - konversi
             * rw ke sw itu pake umur juga, tapi ga tau pengaruhnya besar atau
             * enggak - tambahan input tanggal
             */
            int age = countAge();
            System.out.println(age);
            int swSE = this.norma.getInterpretation("SE", Integer.parseInt(SEInput.getText()), age);
            int swWA = this.norma.getInterpretation("WA", Integer.parseInt(WAInput.getText()), age);
            int swAN = this.norma.getInterpretation("AN", Integer.parseInt(ANInput.getText()), age);
            int swME = this.norma.getInterpretation("ME", Integer.parseInt(MEInput.getText()), age);
            int swRA = this.norma.getInterpretation("RA", Integer.parseInt(RAInput.getText()), age);
            int swZR = this.norma.getInterpretation("ZR", Integer.parseInt(ZRInput.getText()), age);
            int swFA = this.norma.getInterpretation("FA", Integer.parseInt(FAInput.getText()), age);
            int swWU = this.norma.getInterpretation("WU", Integer.parseInt(WUInput.getText()), age);
            Integer GE = this.norma.getStdScore(Integer.parseInt(GEInput.getText()));
            int swGE = this.norma.getInterpretation("GE", GE, age);
            
            int rwGESAMT = Integer.parseInt(SEInput.getText())
                    + Integer.parseInt(WAInput.getText())
                    + Integer.parseInt(ANInput.getText())
                    + Integer.parseInt(MEInput.getText())
                    + Integer.parseInt(RAInput.getText())
                    + Integer.parseInt(ZRInput.getText())
                    + Integer.parseInt(FAInput.getText())
                    + Integer.parseInt(WUInput.getText())
                    + Integer.parseInt(GEInput.getText());

            int swGESAMT = this.norma.getInterpretGESAMT("GESAMT", rwGESAMT, age);
            int iq = this.norma.getIqScore(swGESAMT);
            nilaiSW.put("se", swSE);
            nilaiKategori.put("kuase", kategoriNilai(swSE));
            nilaiSW.put("wa", swWA);
            nilaiKategori.put("kuawa", kategoriNilai(swWA));
            nilaiSW.put("an", swAN);
            nilaiKategori.put("kuaan", kategoriNilai(swAN));
            nilaiSW.put("me", swME);
            nilaiKategori.put("kuame", kategoriNilai(swME));
            nilaiSW.put("ra", swRA);
            nilaiKategori.put("kuara", kategoriNilai(swRA));
            nilaiSW.put("zr", swZR);
            nilaiKategori.put("kuazr", kategoriNilai(swZR));
            nilaiSW.put("fa", swFA);
            nilaiKategori.put("kuafa", kategoriNilai(swFA));
            nilaiSW.put("wu", swWU);
            nilaiKategori.put("kuawu", kategoriNilai(swWU));
            nilaiSW.put("ge", swGE);
            nilaiKategori.put("kuage", kategoriNilai(swGE));
            nilaiSW.put("iq", iq);
            nilaiKategori.put("charIQ", kategoriNilai(iq));
            nilaiSW.put("jml", rwGESAMT);

            evalAnalisa(swAN, swWU);
            evalKomperehensif(swGE, swFA);
            evalDayaIngat(swME);
            evalMengolahAngka(swRA, swZR);
            evalBahasa(swWA, swGE);
            evalKreativitas(swFA, swWU);
            evalMenilai(swSE);
            evalKeputusan(swSE, swAN, swWU, swRA, swZR);
            evalBerpikir(swGE, swRA, swAN, swZR);
            evalfleksibel(swGE, swRA, swAN, swZR);
            evalJenisKecerdasan(swWA, swGE, swSE, swAN);
            refreshTable();

            tombolCetak.setEnabled(true);
            tombolUbah.setEnabled(true);

            JOptionPane.showMessageDialog(this, "Berhasil");

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Ada kesalahan: " + e.getMessage());
        }
    }//GEN-LAST:event_tombolHasilActionPerformed

    String kategoriNilai(double nilai) {
        double[] lowerVal = {0, 84, 90, 99, 110, 120, 130};
        double[] upperVal = {83.9999, 89.9999, 98.9999, 109.9999, 119.9999, 129.9999, Double.MAX_VALUE};
        String[] kategori = {"KS", "K", "C-", "C", "C+", "B", "BS"};

        for (int i = 0; i < lowerVal.length; i++) {
            if (nilai >= lowerVal[i] && nilai <= upperVal[i]) {
                return kategori[i];
            }
        }
        
        return null;
    }


    private void tombolCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolCetakActionPerformed
        //Mencetak hasil input ke dalam jasper file
        String fileName = "ist_app/resource/report/ISTReport.jasper";
        //String fileName = "ist_app/formIST.jasper";
        //String fileName = "ist_app/hasil.jasper";
        //        String outFile = "./Report" + " - " + namaInput.getText() + ".pdf";
        //        String outFile = "C:/FormIST/Report" + " - " + namaInput.getText() + ".pdf";

        SimpleDateFormat originalFormat = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy");
        String formattedDate = "";
        SimpleDateFormat newFormat = new SimpleDateFormat("dd MMMM yyyy");

        try {
            Date date = originalFormat.parse(tanggalController.getDate().toString());

            formattedDate = newFormat.format(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        Map<String, Object> parameter = new HashMap<String, Object>();

        JRBeanCollectionDataSource studentCollectionDataSource
                = new JRBeanCollectionDataSource(nilai);

        parameter.put("datapenilaian", studentCollectionDataSource);
        parameter.put("nama", namaInput.getText());
        parameter.put("tanggal", formattedDate);

        //tabel rw
        parameter.put("charIQ", charIQ);
        parameter.put("rwse", SEInput.getText());
        parameter.put("rwwa", WAInput.getText());
        parameter.put("rwan", ANInput.getText());
        parameter.put("rwge", GEInput.getText());
        parameter.put("rwme", MEInput.getText());
        parameter.put("rwra", RAInput.getText());
        parameter.put("rwzr", ZRInput.getText());
        parameter.put("rwfa", FAInput.getText());
        parameter.put("rwwu", WUInput.getText());

        //tabel sw
        parameter.put("swse", nilaiSW.get("se").toString());
        parameter.put("swwa", nilaiSW.get("wa").toString());
        parameter.put("swan", nilaiSW.get("an").toString());
        parameter.put("swge", nilaiSW.get("ge").toString());
        parameter.put("swme", nilaiSW.get("me").toString());
        parameter.put("swra", nilaiSW.get("ra").toString());
        parameter.put("swzr", nilaiSW.get("zr").toString());
        parameter.put("swfa", nilaiSW.get("fa").toString());
        parameter.put("swwu", nilaiSW.get("wu").toString());
        parameter.put("iq", nilaiSW.get("iq").toString());
        parameter.put("jml", nilaiSW.get("jml").toString());

        //kuawu error
        String[] key = {"kuase", "kuawa", "kuaan", "kuage", "kuame", "kuara", "kuazr", "kuafa", "kuawu", "charIQ"};
        for (int i = 0; i < key.length; i++) {
            System.out.println(key[i] + ": " + nilaiKategori.get(key[i]));
            parameter.put(key[i], nilaiKategori.get(key[i]));
        }

        try {
            //            InputStream stream = Main.class.getResourceAsStream(fileName);
            //            JOptionPane.showMessageDialog(this, "aaa!");
            //            JasperReport jasperDesign = JasperCompileManager.compileReport(stream);
            //            JOptionPane.showMessageDialog(this, "bbb!");
            //            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperDesign, parameter,
            //                    new JREmptyDataSource());

            InputStream stream = Main.class.getResourceAsStream(fileName);
            JasperPrint jasperPrint = JasperFillManager.fillReport(
                    ClassLoader.getSystemResourceAsStream(fileName), parameter,
                    new JREmptyDataSource());

            //            File file = new File(outFile);
            //            OutputStream outputSteam = new FileOutputStream(file);
            //            JasperExportManager.exportReportToPdfStream(jasperPrint, outputSteam);
            //            outputSteam.close();
            JOptionPane.showMessageDialog(this, "Berhasil!");
            bersihkan();
            JasperViewer.viewReport(jasperPrint, false);
            //            System.out.println("Data: ");
            //            for (int i = 0; i < nilai.size(); i++) {
            //                System.out.println(nilai.get(i));
            //            }
        } catch (JRException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tombolCetakActionPerformed

    private void tombolKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolKeluarActionPerformed
        //keluar dari panel ist dan kembali ke main
        mainFrame.showCard("MainMenuPanel");
        mainFrame.setTitle("KATEGORISASI MAPPING");
    }//GEN-LAST:event_tombolKeluarActionPerformed

    private void tombolUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolUbahActionPerformed
        //input form for password

        JPasswordField passwordField = new JPasswordField();
        Object[] message = {"Masukkan Password: ", passwordField};
        String real = "12345";
        int option = 0;

        do {
            option = JOptionPane.showConfirmDialog(this, message, "Konfirmasi untuk mengubah", JOptionPane.OK_CANCEL_OPTION);

            if (option == JOptionPane.OK_OPTION) {
                String pw = new String(passwordField.getPassword());

                if (pw.equals(real)) {
                    JOptionPane.showMessageDialog(null, "Berhasil masuk");
                    //mengubah isi file rubrik
                    EditForm dialog = new EditForm(null, true);
                    dialog.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Gagal masuk");
                }
            } else {
                break;
            }

        } while (!(real.equals(new String(passwordField.getPassword()))));
        bersihkan();
        inisiasill();
        text2ll();
        initializeIntepretations();
    }//GEN-LAST:event_tombolUbahActionPerformed

    private void tabelHasilMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelHasilMouseMoved
        // TODO add your handling code here:
        // Set the tooltip to an empty string
        tabelHasil.setToolTipText("");

        // Get the table cell value where the mouse is located
        String value = (String) tabelHasil.getValueAt(tabelHasil.rowAtPoint(evt.getPoint()),
                tabelHasil.columnAtPoint(evt.getPoint()));

        // If the length of the value is greater than some number...
        //        if (value.length() > 50) {
        // add a tooltip to the JTable that shows the value
        tabelHasil.setToolTipText(value);
        //        }
    }//GEN-LAST:event_tabelHasilMouseMoved

    private void namaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaInputActionPerformed

    private void tanggalControllerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tanggalControllerKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tanggalControllerKeyReleased

    private void tgllahirinputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tgllahirinputKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tgllahirinputKeyReleased

    private void SEInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_SEInputFocusLost
        try {
            if (!SEInput.getText().equals("")) {
                int data = Integer.parseInt(SEInput.getText());

                if (data < 0 && data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                    SEInput.setText("");
                }
            }
        } catch (NumberFormatException eror) {
            SEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_SEInputFocusLost

    private void WAInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_WAInputFocusLost
        try {
            if (!WAInput.getText().equals("")) {
                int data = Integer.parseInt(WAInput.getText());

                if (data < 0 && data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                    WAInput.setText("");
                }
            }
        } catch (NumberFormatException eror) {
            WAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_WAInputFocusLost

    private void ANInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ANInputFocusLost
        try {
            if (!ANInput.getText().equals("")) {
                int data = Integer.parseInt(ANInput.getText());

                if (data < 0 && data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                    ANInput.setText("");
                }
            }
        } catch (NumberFormatException eror) {
            ANInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_ANInputFocusLost

    private void GEInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_GEInputFocusLost
        try {
            if (!GEInput.getText().equals("")) {
                int data = Integer.parseInt(GEInput.getText());

                if (data < 0 && data > 32) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 31!", "Error", JOptionPane.ERROR_MESSAGE);
                    GEInput.setText("");
                }
            }
        } catch (NumberFormatException eror) {
            GEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_GEInputFocusLost

    private void MEInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_MEInputFocusLost
        try {
            if (!MEInput.getText().equals("")) {
                int data = Integer.parseInt(MEInput.getText());

                if (data < 0 && data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                    MEInput.setText("");
                }
            }
        } catch (NumberFormatException eror) {
            MEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_MEInputFocusLost

    private void RAInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RAInputFocusLost
        try {
            if (!RAInput.getText().equals("")) {
                int data = Integer.parseInt(RAInput.getText());

                if (data < 0 && data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                    RAInput.setText("");
                }
            }
        } catch (NumberFormatException eror) {
            RAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_RAInputFocusLost

    private void ZRInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ZRInputFocusLost
        try {
            if (!ZRInput.getText().equals("")) {
                int data = Integer.parseInt(ZRInput.getText());

                if (data < 0 || data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                    ZRInput.setText("");
                }
            }
        } catch (NumberFormatException eror) {
            ZRInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_ZRInputFocusLost

    private void FAInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_FAInputFocusLost
        try {
            if (!FAInput.getText().equals("")) {
                int data = Integer.parseInt(FAInput.getText());

                if (data < 0 && data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException eror) {
            FAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_FAInputFocusLost

    private void WUInputFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_WUInputFocusLost
        try {
            if (!WUInput.getText().equals("")) {
                int data = Integer.parseInt(WUInput.getText());

                if (data < 0 && data > 20) {
                    JOptionPane.showMessageDialog(this, "Nilai harus antara 0 dan 20!", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException eror) {
            WUInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        perbaruiStatusTombol();
    }//GEN-LAST:event_WUInputFocusLost

    private void refreshTable() {
        try {
            KomponenPenilaianTableModel model = new KomponenPenilaianTableModel(nilai);
            tabelHasil.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Data gagal ditampilkan");
        }

        setTableProperties();
    }

    private void clearAllComp() {
        namaInput.setText("");
        setDate();
        SEInput.setText("");
        WAInput.setText("");
        ANInput.setText("");
        GEInput.setText("");
        MEInput.setText("");
        RAInput.setText("");
        ZRInput.setText("");
        FAInput.setText("");
        WUInput.setText("");
        resetTable();
    }

    private boolean semuaInputTerisi() {
        return tgllahirinput.getCalendar() != null
                && tanggalController.getCalendar() != null
                && !namaInput.getText().isEmpty()
                && !ANInput.getText().isEmpty()
                && !FAInput.getText().isEmpty()
                && !GEInput.getText().isEmpty()
                && !MEInput.getText().isEmpty()
                && !RAInput.getText().isEmpty()
                && !SEInput.getText().isEmpty()
                && !WAInput.getText().isEmpty()
                && !WUInput.getText().isEmpty()
                && !ZRInput.getText().isEmpty();
    }

    private boolean semuaInputKosong() {
        return tgllahirinput.getCalendar() == null
                && tanggalController.getCalendar() == null
                && namaInput.getText().isEmpty()
                && ANInput.getText().isEmpty()
                && FAInput.getText().isEmpty()
                && GEInput.getText().isEmpty()
                && MEInput.getText().isEmpty()
                && RAInput.getText().isEmpty()
                && SEInput.getText().isEmpty()
                && WAInput.getText().isEmpty()
                && WUInput.getText().isEmpty()
                && ZRInput.getText().isEmpty();
    }

    private void perbaruiStatusTombol() {
        tombolBatal.setEnabled(!semuaInputKosong());
        tombolHasil.setEnabled(semuaInputTerisi());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ANInput;
    private javax.swing.JLabel ANLabel;
    private javax.swing.JTextField FAInput;
    private javax.swing.JLabel FALabel;
    private javax.swing.JTextField GEInput;
    private javax.swing.JLabel GELabel;
    private javax.swing.JTextField MEInput;
    private javax.swing.JLabel MELabel;
    private javax.swing.JTextField RAInput;
    private javax.swing.JLabel RALabel;
    private javax.swing.JTextField SEInput;
    private javax.swing.JLabel SELabel;
    private javax.swing.JTextField WAInput;
    private javax.swing.JLabel WALabel;
    private javax.swing.JTextField WUInput;
    private javax.swing.JLabel WULabel;
    private javax.swing.JTextField ZRInput;
    private javax.swing.JLabel ZRLabel;
    private javax.swing.JPanel controller;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel judul;
    private javax.swing.JPanel masukan;
    private javax.swing.JTextField namaInput;
    private javax.swing.JLabel namaLabel;
    private javax.swing.JLabel namaLabel1;
    private javax.swing.JLabel namaLabel2;
    private javax.swing.JTable tabelHasil;
    private com.toedter.calendar.JDateChooser tanggalController;
    private com.toedter.calendar.JDateChooser tgllahirinput;
    private javax.swing.JButton tombolBatal;
    private javax.swing.JButton tombolCetak;
    private javax.swing.JButton tombolHasil;
    private javax.swing.JButton tombolKeluar;
    private javax.swing.JButton tombolUbah;
    // End of variables declaration//GEN-END:variables

    void inisiasill() {
        coraBerpikir = new LinkedList<>();
        jenisKecerdasan = new LinkedList<>();
        fleksibel = new LinkedList<>();
    }

    private void bersihkan() {
        resetTable();
        tombolBatal.setEnabled(false);
        tombolHasil.setEnabled(false);
        tombolCetak.setEnabled(false);
        namaInput.setText("");
        ANInput.setText("");
        FAInput.setText("");
        GEInput.setText("");
        MEInput.setText("");
        RAInput.setText("");
        SEInput.setText("");
        WAInput.setText("");
        WUInput.setText("");
        ZRInput.setText("");
    }

    private void evalTarKecerdasan(int iq) { //Taraf Kecerdasan
        try {
            Result hasil = this.tarKecerdasan.interpret(iq);
            nil = String.valueOf(iq);
            System.out.println("hasil Taraf Kecerdasan: " + hasil);
            this.nilai.add(new KomponenPenilaian("Taraf Kecerdasan", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charIQ = hasil.getKategori();
            charNilai.put("IQ", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi kecerdasan error: " + e);
        }

    }

    private void evalAnalisa(int an, int wu) { //Kemampuan analisis
        try {
            double ANWU = (an + wu) / 2.0;
            nil = String.valueOf(ANWU);

            Result hasil = this.kemAnalisis.interpret(ANWU);
            this.nilai.add(new KomponenPenilaian("Kemampuan analisis", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuase", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi analisa error: " + e);
        }
    }

    private void evalKomperehensif(int ge, int fa) { //Kemampuan berpikir komprehensif
        try {
            double GEFA = (ge + fa) / 2.0;
            nil = String.valueOf(GEFA);

            Result hasil = this.berpikirKompreheren.interpret(GEFA);
            this.nilai.add(new KomponenPenilaian("Kemampuan berpikir komprehensif", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuawa", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evalusasi komperehensif error: " + e);
        }
    }

    private void evalDayaIngat(int me) { //Daya ingat
        try {
            int ME = me;
            nil = String.valueOf(ME);

            Result hasil = this.dayaIngat.interpret(ME);
            this.nilai.add(new KomponenPenilaian("Daya Ingat", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuaan", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi daya ingat error: " + e);
        }
    }

    private void evalMengolahAngka(int ra, int zr) { //Kemampuan berhitung / mengolah angka
        try {
            double RAZR = (ra + zr) / 2.0;
            nil = String.valueOf(RAZR);
            Result hasil = this.angka.interpret(RAZR);
            this.nilai.add(new KomponenPenilaian("Kemampuan berhitung / mengolah angka", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuage", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi mengolah angka error: " + e);
        }
    }

    private void evalBahasa(int wa, int ge) { //Kemampuan berbahasa
        try {
            double WAGE = (wa + ge) / 2.0;
            System.out.println(WAGE);
            nil = String.valueOf(WAGE);
            Result hasil = this.berbahasa.interpret(WAGE);
            this.nilai.add(new KomponenPenilaian("Kemampuan berbahasa", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuame", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi bahasa error: " + e);
        }
    }

    private void evalKreativitas(int fa, int wu) { //Kreativitas
        try {
            double FAWU = (fa + wu) / 2.0;
            nil = String.valueOf(FAWU);
            Result hasil = this.kreativitas.interpret(FAWU);
            this.nilai.add(new KomponenPenilaian("Kreativitas", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuara", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi kreativitas error: " + e);
        }
    }

    private void evalMenilai(int se) { //Kemampuan menilai
        try {
            int SE = se;
            nil = String.valueOf(SE);
            Result hasil = this.menilai.interpret(SE);
            this.nilai.add(new KomponenPenilaian("Kemampuan menilai", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuazr", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi menilai: " + e);
        }
    }

//error
    private void evalKeputusan(int se, int an, int wu, int ra, int zr) { //Kemampuan mengambil keputusan
        try {
            double SEANWURAZR = (se + an + wu + ra + zr) / 5.0;
            System.out.println(SEANWURAZR);
            nil = String.valueOf(SEANWURAZR);
            Result hasil = this.mengambilKeputusan.interpret(SEANWURAZR);
            this.nilai.add(new KomponenPenilaian("Kemampuan mengambil keputusan", nil, hasil.getKategori(), hasil.getDeskripsi()));
            charNilai.put("kuafa", hasil.getKategori());
        } catch (Exception e) {
            System.err.println("evaluasi keputusan error: " + e);
        }
    }

    private void evalBerpikir(int ge, int ra, int an, int zr) { //corak/cara berpikir
        try {
            double nilaiGE = (double) ge;
            double nilaiRA = (double) ra;
            double nilaiGERA = nilaiGE + nilaiRA;
            double nilaiAN = (double) an;
            double nilaiZR = (double) zr;
            double nilaiANZR = nilaiAN + nilaiZR;
            double toleransi = 0.5;

            double[] nils = {nilaiGE, nilaiRA, nilaiAN, nilaiZR};

            if (nilaiGERA > nilaiANZR) {
                Kategori = "Birokratis-normatif";
                deskripsi = coraBerpikir.get(0);
            } else if (nilaiGERA < nilaiANZR) {
                Kategori = "Fleksibel";
                deskripsi = coraBerpikir.get(1);
            } else if (Math.abs(nilaiGERA + nilaiANZR) <= toleransi) {
                Kategori = "Belum terarah-belum konsisten";
                deskripsi = coraBerpikir.get(2);
            }

            nilai.add(new KomponenPenilaian("Cara/Corak berpikir", "", Kategori, deskripsi));
            charNilai.put("kuawu", Kategori);
        } catch (Exception e) {
            System.err.println("evaluasi berpikir error: " + e);
        }
    }

    private void evalfleksibel(int ge, int ra, int an, int zr) { // Kemampuan berpikir fleksibel
        try {
            double nilaiGERA = (double) (ge + ra);
            double nilaiANZR = (double) (an + zr);

            if ((nilaiGERA - nilaiANZR) == (-10)) {
                Kategori = "fleksibel";
                deskripsi = fleksibel.get(0);
            } else if ((nilaiGERA - nilaiANZR) == (10)) {
                Kategori = "Kaku";
                deskripsi = fleksibel.get(1);
            } else if (((nilaiGERA - nilaiANZR) >= (-10) & (nilaiGERA - nilaiANZR) <= (0)) || ((nilaiGERA - nilaiANZR) <= (10) & (nilaiGERA - nilaiANZR) >= (1))) {
                Kategori = "belum terarah-belum berkembang";
                deskripsi = fleksibel.get(2);
            }

            KomponenPenilaian variabel11 = new KomponenPenilaian("Kemampuan berpikir fleksibel", "", Kategori, deskripsi);
            nilai.add(variabel11);

//        double nilaiGERA = Double.parseDouble(GEInput.getText()) + Double.parseDouble(RAInput.getText());
//        double nilaiANZR = Double.parseDouble(ANInput.getText()) + Double.parseDouble(ZRInput.getText());
//        double hasil = nilaiGERA - nilaiANZR;
//
//        if (hasil == (-10)) {
//            Kategori = "Fleksibel";
//            deskripsi = fleksibel.get(0);
//        } else if (hasil == 10) {
//            Kategori = "Kaku";
//            deskripsi = fleksibel.get(1);
//        } else {
//            Kategori = "Belum terarah-belum berkembang";
//            deskripsi = fleksibel.get(2);
//        }
//        KomponenPenilaian variabel10 = new KomponenPenilaian("Cara/Corak berpikir", "", "", deskripsi);
//        nilai.add(new KomponenPenilaian("kemampuan berpikir fleksibel", "", "", deskripsi));
//        charNilai.put("kuawu", Kategori);
        } catch (Exception e) {
            System.err.println("evaluasi fleksibel error: " + e);
        }
    }

    private void evalJenisKecerdasan(int wa, int ge, int se, int an) {
        try {
            double nilaiWAGE = Double.parseDouble(WAInput.getText()) + Double.parseDouble(GEInput.getText());
            double nilaiSEAN = Double.parseDouble(SEInput.getText()) + Double.parseDouble(ANInput.getText());

            if (nilaiWAGE > nilaiSEAN) {
                Kategori = "Tipe pemikiran teoritis-konseptual";
                deskripsi = jenisKecerdasan.get(0);
            } else if (nilaiSEAN > nilaiWAGE) {
                Kategori = "Tipe pemikiran praktis";
                deskripsi = jenisKecerdasan.get(1);
            }
            nilai.add(new KomponenPenilaian("Jenis kecerdasan", "", Kategori, deskripsi));
        } catch (Exception e) {
            System.err.println("evaluasi jenis kecerdasan error: " + e);
        }
    }

    private void initializeIntepretations() {
        //taraf kecerdasan
        double[] lowerVal = {0, 84, 90, 99, 110, 120, 130};
        double[] upperVal = {83.9999, 89.9999, 98.9999, 109.9999, 119.9999, 129.9999, Double.MAX_VALUE};
        String[] kategori = {"KS", "K", "C-", "C", "C+", "B", "BS"};

        this.tarKecerdasan = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/taraf kecerdasan.txt", upperVal, lowerVal, kategori
        );

        this.kemAnalisis = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan analisis.txt", upperVal, lowerVal, kategori
        );

        this.dayaIngat = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/daya ingat.txt", upperVal, lowerVal, kategori
        );

        this.berpikirKompreheren = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan berpikir kompreherensif.txt", upperVal, lowerVal, kategori
        );

        this.kreativitas = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kreativitas.txt", upperVal, lowerVal, kategori
        );

        this.menilai = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan menilai.txt", upperVal, lowerVal, kategori
        );

        //error - duplication value with unreasonable things
        this.mengambilKeputusan = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan mengambil keputusan.txt", upperVal, lowerVal, kategori
        );
        this.berbahasa = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan berbahasa.txt", upperVal, lowerVal, kategori
        );

        this.kreativitas = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kreativitas.txt", upperVal, lowerVal, kategori
        );

        this.angka = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/Kemampuan berhitung n mengolah angka.txt", upperVal, lowerVal, kategori
        );
    }

    void text2ll() {
        String file2 = "./src/ist_app/resource/rubrik/corak berpikir.txt";
        loadRubrikFile(file2, coraBerpikir);
        String file10 = "./src/ist_app/resource/rubrik/jenis kecerdasan.txt";
        loadRubrikFile(file10, jenisKecerdasan);
        String file11 = "./src/ist_app/resource/rubrik/kemampuan berfikir fleksibel.txt";
        loadRubrikFile(file11, fleksibel);
        String file12 = "./src/ist_app/resource/rubrik/Kemampuan berhitung n mengolah angka.txt";

    }

    void loadRubrikFile(String filename, LinkedList<String> ll) {
        try {
            BufferedReader br = new BufferedReader(new FileReader(filename));
            String docs;
            StringBuilder fullcontent = new StringBuilder();

            while ((docs = br.readLine()) != null) {
                String teks = br.toString();
                String[] oneLine = docs.split(";");

                for (int i = 0; i < oneLine.length; i++) {
                    ll.add(oneLine[i]);
                }
            }

        } catch (Exception e) {
            System.out.println("error");
        }
    }

    private int countAge() {
        Calendar today = Calendar.getInstance();
        today.setTime(tanggalController.getDate());
        Calendar bdate = Calendar.getInstance();
        bdate.setTime(tgllahirinput.getDate());

        int age = today.get(Calendar.YEAR) - bdate.get(Calendar.YEAR);

        if (today.get(Calendar.MONTH) < bdate.get(Calendar.MONTH)
                || (today.get(Calendar.MONTH) == bdate.get(Calendar.MONTH) && today.get(Calendar.DAY_OF_MONTH) < bdate.get(Calendar.DAY_OF_MONTH))) {
            age--;
        }

        return age;
    }
}
