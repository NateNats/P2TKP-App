/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package ist_app;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.JTable;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author EddHard
 */
public class Main extends javax.swing.JFrame {

    LinkedList<String> tarKecerdasan, berpikirKompreheren, kemAnalisis, dayaIngat, kreativitas, menilai, mengambilKeputusan, berbahasa, coraBerpikir, jenisKecerdasan, fleksibel, angka;

    private List<KomponenPenilaian> nilai = new ArrayList<>();
    private HashMap<String, String> charNilai = new HashMap<>();

    public void setNilai(List<KomponenPenilaian> nilai) {
        this.nilai = nilai;
    }

    private List<NilaiRubrik> nilaiRubrik = new ArrayList<>();
    String charIQ;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        Date tglHariIni = new Date();
        tanggalController.setDate(tglHariIni);
        this.setResizable(false);
        tombolBatal.setEnabled(false);
        tombolHasil.setEnabled(false);
        tombolCetak.setEnabled(false);
        tombolEdit.setEnabled(true);
        resetTable();
        inisiasill();
        text2ll();

    }

    private void resetTable() {
        nilai = new ArrayList<>();
        try {
            KomponenPenilaianTableModel model = new KomponenPenilaianTableModel(nilai);
            tabelHasil.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Data gagal ditampilkan");
        }

        setTableProperties();
    }

    private void refreshTable() {
        try {
            KomponenPenilaianTableModel model = new KomponenPenilaianTableModel(nilai);
            tabelHasil.setModel(model);

//            TableColumnModel columnModel = tabelHasil.getColumnModel();
//            for (int column = 0; column < tabelHasil.getColumnCount(); column++) {
//                int width = 5; // Min width
//                for (int row = 0; row < tabelHasil.getRowCount(); row++) {
//                    TableCellRenderer renderer = tabelHasil.getCellRenderer(row, column);
//                    Component comp = tabelHasil.prepareRenderer(renderer, row, column);
//                    width = Math.max(comp.getPreferredSize().width -50, width);
//                }
////                if (width > 300) {
////                    width = 300;
////                }
//                columnModel.getColumn(column).setPreferredWidth(width);
//            }
//            tabelHasil.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Data gagal ditampilkan");
        }

        setTableProperties();
    }

    private void setTableProperties() {
//        tabelHasil.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabelHasil.getColumnModel().getColumn(0).setPreferredWidth(600);
        tabelHasil.getColumnModel().getColumn(1).setPreferredWidth(200);
        tabelHasil.getColumnModel().getColumn(2).setPreferredWidth(200);
        tabelHasil.getColumnModel().getColumn(3).setPreferredWidth(1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        MainFrame = new javax.swing.JPanel();
        judul = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        masukan = new javax.swing.JPanel();
        namaLabel = new javax.swing.JLabel();
        namaInput = new javax.swing.JTextField();
        IQLabel = new javax.swing.JLabel();
        SELabel = new javax.swing.JLabel();
        WALabel = new javax.swing.JLabel();
        ANLabel = new javax.swing.JLabel();
        GELabel = new javax.swing.JLabel();
        MELabel = new javax.swing.JLabel();
        RALabel = new javax.swing.JLabel();
        ZRLabel = new javax.swing.JLabel();
        FALabel = new javax.swing.JLabel();
        WULabel = new javax.swing.JLabel();
        FAInput = new javax.swing.JTextField();
        WUInput = new javax.swing.JTextField();
        RAInput = new javax.swing.JTextField();
        ZRInput = new javax.swing.JTextField();
        GEInput = new javax.swing.JTextField();
        MEInput = new javax.swing.JTextField();
        WAInput = new javax.swing.JTextField();
        ANInput = new javax.swing.JTextField();
        IQInput = new javax.swing.JTextField();
        SEInput = new javax.swing.JTextField();
        tanggalController = new com.toedter.calendar.JCalendar();
        controller = new javax.swing.JPanel();
        tombolBatal = new javax.swing.JButton();
        tombolHasil = new javax.swing.JButton();
        tombolCetak = new javax.swing.JButton();
        tombolKeluar = new javax.swing.JButton();
        tombolEdit = new javax.swing.JButton();
        hasil = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelHasil = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("IST Mapping");

        MainFrame.setBackground(new java.awt.Color(214, 217, 223));

        judul.setBackground(new java.awt.Color(214, 217, 223));
        judul.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("IST MAPPING");

        javax.swing.GroupLayout judulLayout = new javax.swing.GroupLayout(judul);
        judul.setLayout(judulLayout);
        judulLayout.setHorizontalGroup(
            judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, judulLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        judulLayout.setVerticalGroup(
            judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(judulLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        masukan.setBackground(new java.awt.Color(214, 217, 223));
        masukan.setBorder(javax.swing.BorderFactory.createTitledBorder("Masukan"));
        masukan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        namaLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaLabel.setText("Nama");

        namaInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                namaInputKeyReleased(evt);
            }
        });

        IQLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        IQLabel.setText("IQ");

        SELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SELabel.setText("SE");

        WALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WALabel.setText("WA");

        ANLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ANLabel.setText("AN");

        GELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GELabel.setText("GE");

        MELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MELabel.setText("ME");

        RALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RALabel.setText("RA");

        ZRLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ZRLabel.setText("ZR");

        FALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FALabel.setText("FA");

        WULabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WULabel.setText("WU");

        FAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FAInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FAInputKeyReleased(evt);
            }
        });

        WUInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WUInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                WUInputKeyReleased(evt);
            }
        });

        RAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RAInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                RAInputKeyReleased(evt);
            }
        });

        ZRInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ZRInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ZRInputKeyReleased(evt);
            }
        });

        GEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GEInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                GEInputKeyReleased(evt);
            }
        });

        MEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MEInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MEInputKeyReleased(evt);
            }
        });

        WAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WAInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                WAInputKeyReleased(evt);
            }
        });

        ANInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ANInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ANInputKeyReleased(evt);
            }
        });

        IQInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        IQInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IQInputActionPerformed(evt);
            }
        });
        IQInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                IQInputKeyReleased(evt);
            }
        });

        SEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SEInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SEInputKeyReleased(evt);
            }
        });

        tanggalController.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout masukanLayout = new javax.swing.GroupLayout(masukan);
        masukan.setLayout(masukanLayout);
        masukanLayout.setHorizontalGroup(
            masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(masukanLayout.createSequentialGroup()
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(masukanLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(namaLabel)
                        .addGap(18, 18, 18)
                        .addComponent(namaInput, javax.swing.GroupLayout.DEFAULT_SIZE, 572, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, masukanLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SELabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(IQLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(IQInput, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WALabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ANLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ANInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(WAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MELabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(GELabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(MEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(GEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(masukanLayout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(RALabel))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, masukanLayout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addComponent(ZRLabel)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ZRInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(RAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(11, 11, 11)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FALabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WULabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WUInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                            .addComponent(FAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(78, 78, 78)))
                .addComponent(tanggalController, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );
        masukanLayout.setVerticalGroup(
            masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(masukanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(masukanLayout.createSequentialGroup()
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(namaLabel)
                            .addComponent(namaInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(FAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(FALabel)
                            .addComponent(RAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RALabel)
                            .addComponent(GEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(GELabel)
                            .addComponent(WAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WALabel)
                            .addComponent(IQInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(IQLabel))
                        .addGap(7, 7, 7)
                        .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(WUInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(WULabel)
                            .addComponent(ZRInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ZRLabel)
                            .addComponent(MEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MELabel)
                            .addComponent(ANInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ANLabel)
                            .addComponent(SEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(SELabel)))
                    .addComponent(tanggalController, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        controller.setBackground(new java.awt.Color(214, 217, 223));
        controller.setBorder(javax.swing.BorderFactory.createTitledBorder("Aksi"));

        tombolBatal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolBatal.setText("Batal");
        tombolBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolBatalActionPerformed(evt);
            }
        });

        tombolHasil.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolHasil.setText("Hasil");
        tombolHasil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolHasilActionPerformed(evt);
            }
        });

        tombolCetak.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolCetak.setText("Cetak");
        tombolCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolCetakActionPerformed(evt);
            }
        });

        tombolKeluar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolKeluar.setText("Keluar");
        tombolKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolKeluarActionPerformed(evt);
            }
        });

        tombolEdit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolEdit.setText("Edit");
        tombolEdit.setMaximumSize(new java.awt.Dimension(78, 31));
        tombolEdit.setMinimumSize(new java.awt.Dimension(78, 31));
        tombolEdit.setPreferredSize(new java.awt.Dimension(78, 31));
        tombolEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolEditActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controllerLayout = new javax.swing.GroupLayout(controller);
        controller.setLayout(controllerLayout);
        controllerLayout.setHorizontalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controllerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tombolBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolHasil, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolCetak, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolKeluar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );
        controllerLayout.setVerticalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controllerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tombolBatal)
                        .addComponent(tombolHasil)
                        .addComponent(tombolKeluar)
                        .addComponent(tombolCetak))
                    .addComponent(tombolEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        hasil.setBackground(new java.awt.Color(214, 217, 223));
        hasil.setBorder(javax.swing.BorderFactory.createTitledBorder("Hasil"));

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        tabelHasil.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tabelHasil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Variabel", "Nilai", "Kategori", "Deskripsi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelHasil.setToolTipText("");
        tabelHasil.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelHasil.setRowHeight(30);
        tabelHasil.setShowHorizontalLines(true);
        tabelHasil.setShowVerticalLines(true);
        tabelHasil.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tabelHasilMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(tabelHasil);
        if (tabelHasil.getColumnModel().getColumnCount() > 0) {
            tabelHasil.getColumnModel().getColumn(0).setResizable(false);
            tabelHasil.getColumnModel().getColumn(1).setResizable(false);
            tabelHasil.getColumnModel().getColumn(2).setResizable(false);
            tabelHasil.getColumnModel().getColumn(3).setResizable(false);
        }

        javax.swing.GroupLayout hasilLayout = new javax.swing.GroupLayout(hasil);
        hasil.setLayout(hasilLayout);
        hasilLayout.setHorizontalGroup(
            hasilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hasilLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        hasilLayout.setVerticalGroup(
            hasilLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hasilLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout MainFrameLayout = new javax.swing.GroupLayout(MainFrame);
        MainFrame.setLayout(MainFrameLayout);
        MainFrameLayout.setHorizontalGroup(
            MainFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MainFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(masukan, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(judul, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(hasil, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        MainFrameLayout.setVerticalGroup(
            MainFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MainFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(judul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(masukan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(hasil, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(MainFrame, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void namaInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_namaInputKeyReleased
        // TODO add your handling code here:
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_namaInputKeyReleased

    private void IQInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IQInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!IQInput.getText().equals("")) {
                int data = Integer.parseInt(IQInput.getText());
            }
        } catch (NumberFormatException eror) {
            IQInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_IQInputKeyReleased

    private void SEInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SEInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!SEInput.getText().equals("")) {
                int data = Integer.parseInt(SEInput.getText());
            }
        } catch (NumberFormatException eror) {
            SEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_SEInputKeyReleased

    private void WAInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WAInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!WAInput.getText().equals("")) {
                int data = Integer.parseInt(WAInput.getText());
            }
        } catch (NumberFormatException eror) {
            WAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_WAInputKeyReleased

    private void ANInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ANInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!ANInput.getText().equals("")) {
                int data = Integer.parseInt(ANInput.getText());
            }
        } catch (NumberFormatException eror) {
            ANInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_ANInputKeyReleased

    private void GEInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GEInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!GEInput.getText().equals("")) {
                int data = Integer.parseInt(GEInput.getText());
            }
        } catch (NumberFormatException eror) {
            GEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_GEInputKeyReleased

    private void MEInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MEInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!MEInput.getText().equals("")) {
                int data = Integer.parseInt(MEInput.getText());
            }
        } catch (NumberFormatException eror) {
            MEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_MEInputKeyReleased

    private void RAInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RAInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!RAInput.getText().equals("")) {
                int data = Integer.parseInt(RAInput.getText());
            }
        } catch (NumberFormatException eror) {
            RAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_RAInputKeyReleased

    private void ZRInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ZRInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!ZRInput.getText().equals("")) {
                int data = Integer.parseInt(ZRInput.getText());
            }
        } catch (NumberFormatException eror) {
            ZRInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_ZRInputKeyReleased

    private void FAInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FAInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!FAInput.getText().equals("")) {
                int data = Integer.parseInt(FAInput.getText());
            }
        } catch (NumberFormatException eror) {
            FAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_FAInputKeyReleased

    private void WUInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WUInputKeyReleased
        // TODO add your handling code here:
        try {
            if (!WUInput.getText().equals("")) {
                int data = Integer.parseInt(WUInput.getText());
            }
        } catch (NumberFormatException eror) {
            WUInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_WUInputKeyReleased

    private void tabelHasilMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelHasilMouseMoved
        // TODO add your handling code here:
        // Set the tooltip to an empty string
        tabelHasil.setToolTipText("");

        // Get the table cell value where the mouse is located
        String value = (String) tabelHasil.getValueAt(tabelHasil.rowAtPoint(evt.getPoint()),
                tabelHasil.columnAtPoint(evt.getPoint()));

        // If the length of the value is greater than some number... 
//        if (value.length() > 50) {
        // add a tooltip to the JTable that shows the value
        tabelHasil.setToolTipText(value);
//        }

    }//GEN-LAST:event_tabelHasilMouseMoved

    private void IQInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IQInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IQInputActionPerformed

    private void tombolKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolKeluarActionPerformed
        // TODO add your handling code here:
        int pilih = JOptionPane.showConfirmDialog(this, "Apakah anda yakin akan keluar?", null, JOptionPane.YES_NO_OPTION);
        if (pilih == JOptionPane.YES_NO_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_tombolKeluarActionPerformed

    private void tombolCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolCetakActionPerformed
        // TODO add your handling code here:
        //        MessageFormat header = new MessageFormat("Hasil Tes IST");
        //        MessageFormat footer = new MessageFormat("P2TKP Universitas Sanata Dharma");
        //
        //        try {
        //            tabelHasil.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        //        } catch (Exception e) {
        //            e.getMessage();
        //        }
        //        String fileName = "./Report/formIST.jrxml";

        String fileName = "ist_app/ISTReport.jasper";
        //String fileName = "ist_app/formIST.jasper";
        //String fileName = "ist_app/hasil.jasper";
        //        String outFile = "./Report" + " - " + namaInput.getText() + ".pdf";
        //        String outFile = "C:/FormIST/Report" + " - " + namaInput.getText() + ".pdf";

        SimpleDateFormat originalFormat = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy");
        String formattedDate = "";
        SimpleDateFormat newFormat = new SimpleDateFormat("dd MMMM yyyy");

        try {
            Date date = originalFormat.parse(tanggalController.getDate().toString());

            formattedDate = newFormat.format(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        Map<String, Object> parameter = new HashMap<String, Object>();

        JRBeanCollectionDataSource studentCollectionDataSource
                = new JRBeanCollectionDataSource(nilai);

        parameter.put("datapenilaian", studentCollectionDataSource);
        parameter.put("nama", namaInput.getText());
        parameter.put("tanggal", formattedDate);

        //tabel sw
        parameter.put("iq", IQInput.getText());
        parameter.put("charIQ", charIQ);
        parameter.put("swse", SEInput.getText());
        parameter.put("swwa", WAInput.getText());
        parameter.put("swan", ANInput.getText());
        parameter.put("swge", GEInput.getText());
        parameter.put("swme", MEInput.getText());
        parameter.put("swra", RAInput.getText());
        parameter.put("swzr", ZRInput.getText());
        parameter.put("swfa", FAInput.getText());
        parameter.put("swwu", WUInput.getText());

        //tabel kua
        String[] key = {"kuase", "kuawa", "kuaan", "kuage", "kuame", "kuara", "kuazr", "kuafa", "kuawu"};

        for (int i = 0; i < key.length - 1; i++) {
            System.out.println(key[i] + ": " + charNilai.get(key[i]));
            parameter.put(key[i], charNilai.get(key[i]));
        }

        try {
            //            InputStream stream = Main.class.getResourceAsStream(fileName);
            //            JOptionPane.showMessageDialog(this, "aaa!");
            //            JasperReport jasperDesign = JasperCompileManager.compileReport(stream);
            //            JOptionPane.showMessageDialog(this, "bbb!");
            //            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperDesign, parameter,
            //                    new JREmptyDataSource());

            InputStream stream = Main.class.getResourceAsStream(fileName);
            JasperPrint jasperPrint = JasperFillManager.fillReport(
                    ClassLoader.getSystemResourceAsStream(fileName), parameter,
                    new JREmptyDataSource());

            //            File file = new File(outFile);
            //            OutputStream outputSteam = new FileOutputStream(file);
            //            JasperExportManager.exportReportToPdfStream(jasperPrint, outputSteam);
            //            outputSteam.close();
            JOptionPane.showMessageDialog(this, "Berhasil!");
            bersihkan();
            JasperViewer.viewReport(jasperPrint, false);
            //            System.out.println("Data: ");
            //            for (int i = 0; i < nilai.size(); i++) {
            //                System.out.println(nilai.get(i));
            //            }
        } catch (JRException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
        //catch (FileNotFoundException ex) {
        //            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        //        } catch (IOException ex) {
        //            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        //        }
    }//GEN-LAST:event_tombolCetakActionPerformed

    private void tombolHasilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolHasilActionPerformed
        // TODO add your handling code here:
        nilai = new ArrayList();
        nilaiMasukArray();
        cetak();
        evaluasiVariabel1();
        evaluasiVariabel2();
        evaluasiVariabel3();
        evaluasiVariabel4();
        evaluasiVariabel5();
        evaluasiVariabel6();
        evaluasiVariabel7();
        evaluasiVariabel8();
        evaluasiVariabel9();
        evaluasiVariabel10();
        evaluasiVariabel11();
        evaluasiVariabel12();

        refreshTable();

        tombolCetak.setEnabled(true);
        tombolEdit.setEnabled(true);

        JOptionPane.showMessageDialog(this, "Berhasil");
    }//GEN-LAST:event_tombolHasilActionPerformed

    private void tombolBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolBatalActionPerformed
        // TODO add your handling code here:
        int pilih = JOptionPane.showConfirmDialog(this, "Apakah anda yakin akan membatalkan?", null, JOptionPane.YES_NO_OPTION);
        if (pilih == JOptionPane.YES_NO_OPTION) {
            bersihkan();
        }
    }//GEN-LAST:event_tombolBatalActionPerformed

    private void tombolEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolEditActionPerformed
        EditForm2 dialog = new EditForm2(Main.this, true);
        //dialog.nilai = this.nilai;
        dialog.setVisible(true);
        inisiasill();
        text2ll();
        //this.nilai = dialog.nilai;
        //refreshTable();
    }//GEN-LAST:event_tombolEditActionPerformed

    int pilihan = 0;
    private String nil = "";
    private String Kategori = "";
    private String deskripsi = "";

    private void nilaiMasukArray() {
        nilaiRubrik.add(new NilaiRubrik("IQ", IQInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("SE", SEInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("WA", WAInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("AN", ANInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("GE", GEInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("ME", MEInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("RA", RAInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("ZR", ZRInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("FA", FAInput.getText()));
        nilaiRubrik.add(new NilaiRubrik("WU", WUInput.getText()));
    }

<<<<<<< HEAD
    void inisiasill() {
        tarKecerdasan = new LinkedList<>();
        berpikirKompreheren = new LinkedList<>();
        kemAnalisis = new LinkedList<>();
        dayaIngat = new LinkedList<>();
        kreativitas = new LinkedList<>();
        menilai = new LinkedList<>();
        mengambilKeputusan = new LinkedList<>();
        berbahasa = new LinkedList<>();
        coraBerpikir = new LinkedList<>();
        jenisKecerdasan = new LinkedList<>();
        fleksibel = new LinkedList<>();
        angka = new LinkedList<>();
    }

=======
>>>>>>> 12c71a68c995d4eefe665e66b1c639e454016dfe
    void text2ll() {
        String file1 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/taraf kecerdasan.txt";
        loadRubrikFile(file1, tarKecerdasan);
        String file2 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/corak berpikir.txt";
        loadRubrikFile(file2, coraBerpikir);
        String file3 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/kemampuan berbahasa.txt";
        loadRubrikFile(file3, berbahasa);
        String file4 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/kemampuan mengambil keputusan.txt";
        loadRubrikFile(file4, mengambilKeputusan);
        String file5 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/kemampuan menilai.txt";
        loadRubrikFile(file5, menilai);
        String file6 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/kreativitas.txt";
        loadRubrikFile(file6, kreativitas);
        String file7 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/daya ingat.txt";
        loadRubrikFile(file7, dayaIngat);
        String file8 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/kemampuan analisis.txt";
        loadRubrikFile(file8, kemAnalisis);
        String file9 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/kemampuan berpikir kompreherensif.txt";
        loadRubrikFile(file9, berpikirKompreheren);
        String file10 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/jenis kecerdasan.txt";
        loadRubrikFile(file10, jenisKecerdasan);
        String file11 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/kemampuan berfikir fleksibel.txt";
        loadRubrikFile(file11, fleksibel);
        String file12 = "C:/backup/Tugas/Reva/IST_App/src/ist_app/rubrik/Kemampuan berhitung n mengolah angka.txt";
        loadRubrikFile(file12, angka);
    }

    void loadRubrikFile(String filename, LinkedList<String> ll) {
        try {
            BufferedReader br = new BufferedReader(new FileReader(filename));
            String docs;
            StringBuilder fullcontent = new StringBuilder();

            while ((docs = br.readLine()) != null) {
                String teks = br.toString();
                String[] oneLine = docs.split(";");

                for (int i = 0; i < oneLine.length; i++) {
                    ll.add(oneLine[i]);
                }
            }

        } catch (Exception e) {
            System.out.println("error");
        }
    }

    private void cetak() {
        for (int i = 0; i < nilaiRubrik.size(); i++) {
            System.out.println(nilaiRubrik.get(i));
        }
    }

    private void evaluasiVariabel1() {
        int scoreIQ = Integer.parseInt(IQInput.getText()); //Taraf Kecerdasan
        nil = IQInput.getText();

        if (scoreIQ < 83) {
            Kategori = "KS";
            deskripsi = tarKecerdasan.get(0);
        } else if (scoreIQ >= 84 && scoreIQ <= 89) {
            Kategori = "K";
            deskripsi = tarKecerdasan.get(1);
        } else if (scoreIQ >= 90 && scoreIQ <= 98) {
            Kategori = "C-";
            deskripsi = tarKecerdasan.get(2);
        } else if (scoreIQ >= 99 && scoreIQ <= 109) {
            Kategori = "C";
            deskripsi = tarKecerdasan.get(3);
        } else if (scoreIQ >= 110 && scoreIQ <= 119) {
            Kategori = "C+";
            deskripsi = tarKecerdasan.get(4);
        } else if (scoreIQ >= 120 && scoreIQ <= 129) {
            Kategori = "B";
            deskripsi = tarKecerdasan.get(5);
        } else if (scoreIQ >= 130) {
            Kategori = "BS";
            deskripsi = tarKecerdasan.get(6);
        }

        KomponenPenilaian variabel1 = new KomponenPenilaian("Kecerdasan Umum", nil, Kategori, deskripsi);
        nilai.add(variabel1);
        charIQ = Kategori;

        charNilai.put("IQ", Kategori);
    }

    private void evaluasiVariabel2() {
        double ANWU = (Double.parseDouble(ANInput.getText()) + Double.parseDouble(WUInput.getText())) / 2; //Kemampuan analisis
        nil = String.valueOf(ANWU);

        if (ANWU < 83) {
            Kategori = "KS";
            deskripsi = kemAnalisis.get(0);
        } else if (ANWU >= 84 && ANWU <= 89) {
            Kategori = "K";
            deskripsi = kemAnalisis.get(1);
        } else if (ANWU >= 90 && ANWU <= 98) {
            Kategori = "C-";
            deskripsi = kemAnalisis.get(2);
        } else if (ANWU >= 99 && ANWU <= 109) {
            Kategori = "C";
            deskripsi = kemAnalisis.get(3);
        } else if (ANWU >= 110 && ANWU <= 119) {
            Kategori = "C+";
            deskripsi = kemAnalisis.get(4);
        } else if (ANWU >= 120 && ANWU <= 129) {
            Kategori = "B";
            deskripsi = kemAnalisis.get(5);
        } else if (ANWU >= 130) {
            Kategori = "BS";
            deskripsi = kemAnalisis.get(6);
        }

        KomponenPenilaian variabel2 = new KomponenPenilaian("Kemampuan Analisis", nil, Kategori, deskripsi);
        nilai.add(variabel2);
        charNilai.put("kuase", Kategori);
    }

    private void evaluasiVariabel3() {
        double GEFA = (Double.parseDouble(GEInput.getText()) + Double.parseDouble(FAInput.getText())) / 2; //Kemampuan berpikir komprehensif
        nil = String.valueOf(GEFA);

        if (GEFA < 83) {
            Kategori = "KS";
            deskripsi = berpikirKompreheren.get(0);
        } else if (GEFA >= 84 && GEFA <= 89) {
            Kategori = "K";
            deskripsi = berpikirKompreheren.get(1);
        } else if (GEFA >= 90 && GEFA <= 98) {
            Kategori = "C-";
            deskripsi = berpikirKompreheren.get(2);
        } else if (GEFA >= 99 && GEFA <= 109) {
            Kategori = "C";
            deskripsi = berpikirKompreheren.get(3);
        } else if (GEFA >= 110 && GEFA <= 119) {
            Kategori = "C+";
            deskripsi = berpikirKompreheren.get(4);
        } else if (GEFA >= 120 && GEFA <= 129) {
            Kategori = "B";
            deskripsi = berpikirKompreheren.get(5);
        } else if (GEFA >= 130) {
            Kategori = "BS";
            deskripsi = berpikirKompreheren.get(6);
        }

        KomponenPenilaian variabel3 = new KomponenPenilaian("Kemampuan Berpikir Komprehensif/Berpikir Konseptual", nil, Kategori, deskripsi);
        nilai.add(variabel3);
        charNilai.put("kuawa", Kategori);
    }

    private void evaluasiVariabel4() {
        int ME = Integer.parseInt(MEInput.getText()); //Daya ingat
        nil = MEInput.getText();

        if (ME < 83) {
            Kategori = "KS";
            deskripsi = dayaIngat.get(0);
        } else if (ME >= 84 && ME <= 89) {
            Kategori = "K";
            deskripsi = dayaIngat.get(1);
        } else if (ME >= 90 && ME <= 98) {
            Kategori = "C-";
            deskripsi = dayaIngat.get(2);
        } else if (ME >= 99 && ME <= 109) {
            Kategori = "C";
            deskripsi = dayaIngat.get(3);
        } else if (ME >= 110 && ME <= 119) {
            Kategori = "C+";
            deskripsi = dayaIngat.get(4);
        } else if (ME >= 120 && ME <= 129) {
            Kategori = "B";
            deskripsi = dayaIngat.get(5);
        } else if (ME >= 130) {
            Kategori = "BS";
            deskripsi = dayaIngat.get(6);
        }

        KomponenPenilaian variabel4 = new KomponenPenilaian("Daya Ingat/Konsentrasi", nil, Kategori, deskripsi);
        nilai.add(variabel4);
        charNilai.put("kuaan", Kategori);
    }
    
    private void evaluasiVariabel5() {
        double RAZR = (Double.parseDouble(RAInput.getText()) + Double.parseDouble(ZRInput.getText())) / 2; //Kemampuan berhitung / mengolah angka
        nil = String.valueOf(RAZR);

        if (RAZR <= 83) {
            Kategori = "KS";
            deskripsi = angka.get(0);
        } else if (RAZR >= 84 && RAZR <= 89) {
            Kategori = "K";
            deskripsi = angka.get(1);
        } else if (RAZR >= 90 && RAZR <= 98) {
            Kategori = "C-";
            deskripsi = angka.get(2);
        } else if (RAZR >= 99 && RAZR <= 109) {
            Kategori = "C";
            deskripsi = angka.get(3);
        } else if (RAZR >= 110 && RAZR <= 119) {
            Kategori = "C+";
            deskripsi = angka.get(4);
        } else if (RAZR >= 120 & RAZR <= 129) {
            Kategori = "B";
            deskripsi = angka.get(5);
        } else if (RAZR >= 130) {
            Kategori = "BS";
            deskripsi = angka.get(6);
        }

        KomponenPenilaian variabel5 = new KomponenPenilaian("Kemampuan berhitung / mengolah angka", nil, Kategori, deskripsi);
        nilai.add(variabel5);
        charNilai.put("kuage", Kategori);
    }

    private void evaluasiVariabel6() {
        double WAGE = (Double.parseDouble(WAInput.getText()) + Double.parseDouble(GEInput.getText())) / 2; //Kemampuan berbahasa
        nil = String.valueOf(WAGE);

        if (WAGE <= 83) {
            Kategori = "KS";
            deskripsi = berbahasa.get(0);
        } else if (WAGE > 83 && WAGE <= 89) {
            Kategori = "K";
            deskripsi = berbahasa.get(1);
        } else if (WAGE > 89 && WAGE <= 98) {
            Kategori = "C-";
            deskripsi = berbahasa.get(2);
        } else if (WAGE > 98 && WAGE <= 109) {
            Kategori = "C";
            deskripsi = berbahasa.get(3);
        } else if (WAGE > 109 && WAGE <= 119) {
            Kategori = "C+";
            deskripsi = berbahasa.get(4);
        } else if (WAGE > 119 & WAGE <= 129) {
            Kategori = "B";
            deskripsi = berbahasa.get(5);
        } else if (WAGE > 130) {
            Kategori = "BS";
            deskripsi = berbahasa.get(6);
        }

        KomponenPenilaian variabel6 = new KomponenPenilaian("Kemampuan Berbahasa", nil, Kategori, deskripsi);
        nilai.add(variabel6);
        charNilai.put("kuame", Kategori);
    }

    private void evaluasiVariabel7() {
        double FAWU = (Double.parseDouble(FAInput.getText()) + Double.parseDouble(WUInput.getText())) / 2; //Kreativitas
        nil = String.valueOf(FAWU);

        if (FAWU < 83) {
            Kategori = "KS";
            deskripsi = kreativitas.get(0);
        } else if (FAWU >= 84 && FAWU <= 89) {
            Kategori = "KS";
            deskripsi = kreativitas.get(1);
        } else if (FAWU >= 90 && FAWU <= 98) {
            Kategori = "C-";
            deskripsi = kreativitas.get(2);
        } else if (FAWU >= 99 && FAWU <= 109) {
            Kategori = "C";
            deskripsi = kreativitas.get(3);
        } else if (FAWU >= 110 && FAWU <= 119) {
            Kategori = "C+";
            deskripsi = kreativitas.get(4);
        } else if (FAWU >= 120 & FAWU <= 129) {
            Kategori = "B";
            deskripsi = kreativitas.get(5);
        } else if (FAWU >= 130) {
            Kategori = "BS";
            deskripsi = kreativitas.get(6);
        }

        KomponenPenilaian variabel7 = new KomponenPenilaian("Kreativitas", nil, Kategori, deskripsi);
        nilai.add(variabel7);
        charNilai.put("kuara", Kategori);
    }

    private void evaluasiVariabel8() {
        int SE = Integer.parseInt(SEInput.getText()); //Kemampuan menilai
        nil = SEInput.getText();

        if (SE < 83) {
            Kategori = "KS";
            deskripsi = menilai.get(0);
        } else if (SE >= 84 && SE <= 89) {
            Kategori = "K";
            deskripsi = menilai.get(1);
        } else if (SE >= 90 && SE <= 98) {
            Kategori = "C-";
            deskripsi = menilai.get(2);
        } else if (SE >= 99 && SE <= 109) {
            Kategori = "C";
            deskripsi = menilai.get(3);
        } else if (SE >= 110 && SE <= 119) {
            Kategori = "C+";
            deskripsi = menilai.get(4);
        } else if (SE >= 120 & SE <= 129) {
            Kategori = "B";
            deskripsi = menilai.get(5);
        } else if (SE >= 130) {
            Kategori = "BS";
            deskripsi = menilai.get(6);
        }

        KomponenPenilaian variabel8 = new KomponenPenilaian("Kemampuan Menilai/Judgement", nil, Kategori, deskripsi);
        nilai.add(variabel8);
        charNilai.put("kuazr", Kategori);
    }

    private void evaluasiVariabel9() {
        double SEANWURAZR = (Double.parseDouble(SEInput.getText()) + Double.parseDouble(ANInput.getText())
                + Double.parseDouble(WUInput.getText()) + Double.parseDouble(RAInput.getText()) + Double.parseDouble(ZRInput.getText())) / 5; //Kemampuan mengambil keputusan
        nil = String.valueOf(SEANWURAZR);

        if (SEANWURAZR < 83) {
            Kategori = "KS";
            deskripsi = mengambilKeputusan.get(0);
        } else if (SEANWURAZR >= 84 && SEANWURAZR <= 89) {
            Kategori = "K";
            deskripsi = mengambilKeputusan.get(1);
        } else if (SEANWURAZR >= 90 && SEANWURAZR <= 98) {
            Kategori = "C-";
            deskripsi = mengambilKeputusan.get(2);
        } else if (SEANWURAZR >= 99 && SEANWURAZR <= 109) {
            Kategori = "C";
            deskripsi = mengambilKeputusan.get(3);
        } else if (SEANWURAZR >= 110 && SEANWURAZR <= 119) {
            Kategori = "C+";
            deskripsi = mengambilKeputusan.get(4);
        } else if (SEANWURAZR >= 120 && SEANWURAZR <= 129) {
            Kategori = "B";
            deskripsi = mengambilKeputusan.get(5);
        } else if (SEANWURAZR >= 130) {
            Kategori = "BS";
            deskripsi = mengambilKeputusan.get(6);
        }

        KomponenPenilaian variabel9 = new KomponenPenilaian("Kemampuan Mengambil Keputusan", nil, Kategori, deskripsi);
        nilai.add(variabel9);
        charNilai.put("kuafa", Kategori);
    }

    private void evaluasiVariabel10() { //corak/cara berpikir
        double nilaiGE = Double.parseDouble(GEInput.getText());
        double nilaiRA = Double.parseDouble(RAInput.getText());
        double nilaiGERA = nilaiGE + nilaiRA;
        double nilaiAN = Double.parseDouble(ANInput.getText());
        double nilaiZR = Double.parseDouble(ZRInput.getText());
        double nilaiANZR = nilaiAN + nilaiZR;
        double toleransi = 0.5;

        double[] nils = {nilaiGE, nilaiRA, nilaiAN, nilaiZR};

        if (nilaiGERA > nilaiANZR) {
            Kategori = "Birokratis-normatif";
            deskripsi = coraBerpikir.get(0);
        } else if (nilaiGERA < nilaiANZR) {
            Kategori = "Fleksibel";
            deskripsi = coraBerpikir.get(1);
        } else if (Math.abs(nilaiGERA + nilaiANZR) <= toleransi) {
            Kategori = "Belum terarah-belum konsisten";
            deskripsi = coraBerpikir.get(2);
        }

        KomponenPenilaian variabel10 = new KomponenPenilaian("Cara/Corak berpikir", "", "", deskripsi);
        nilai.add(variabel10);
        charNilai.put("kuawu", Kategori);
    }

    private void evaluasiVariabel11() { // Kemampuan berpikir fleksibel
        double nilaiGERA = Double.parseDouble(GEInput.getText()) + Double.parseDouble(RAInput.getText());
        double nilaiANZR = Double.parseDouble(ANInput.getText()) + Double.parseDouble(ZRInput.getText());

        if ((nilaiGERA - nilaiANZR) == (-10)) {
            Kategori = "fleksibel";
            deskripsi = fleksibel.get(0);
        } else if ((nilaiGERA - nilaiANZR) == (10)) {
            Kategori = "Kaku";
            deskripsi = fleksibel.get(1);
        } else if (((nilaiGERA - nilaiANZR) >= (-10) & (nilaiGERA - nilaiANZR) <= (0)) || ((nilaiGERA - nilaiANZR) <= (10) & (nilaiGERA - nilaiANZR) >= (1))) {
            Kategori = "belum terarah-belum berkembang";
            deskripsi = fleksibel.get(2);
        }

        KomponenPenilaian variabel11 = new KomponenPenilaian("Kemampuan berpikir fleksibel", "", "", deskripsi);
        nilai.add(variabel11);
    }

    private void evaluasiVariabel12() {
        double nilaiWAGE = Double.parseDouble(WAInput.getText()) + Double.parseDouble(GEInput.getText());
        double nilaiSEAN = Double.parseDouble(SEInput.getText()) + Double.parseDouble(ANInput.getText());

        if (nilaiWAGE > nilaiSEAN) {
            Kategori = "Tipe pemikiran teoritis-konseptual";
            deskripsi = jenisKecerdasan.get(0);
        } else if (nilaiSEAN > nilaiWAGE) {
            Kategori = "Tipe pemikiran praktis";
            deskripsi = jenisKecerdasan.get(1);
        }

        KomponenPenilaian variabel12 = new KomponenPenilaian("Jenis kecerdasan", "", Kategori, deskripsi);
        nilai.add(variabel12);
    }

    private void bersihkan() {
        resetTable();
        tombolBatal.setEnabled(false);
        tombolHasil.setEnabled(false);
        tombolCetak.setEnabled(false);
        //tombolEdit.setEnabled(false);
        namaInput.setText("");
        ANInput.setText("");
        FAInput.setText("");
        GEInput.setText("");
        IQInput.setText("");
        MEInput.setText("");
        RAInput.setText("");
        SEInput.setText("");
        WAInput.setText("");
        WUInput.setText("");
        ZRInput.setText("");
    }

    private void tombolBatalEnableFalse() {
        if (namaInput.getText().equals("") && ANInput.getText().equals("") && FAInput.getText().equals("") && GEInput.getText().equals("")
                && IQInput.getText().equals("") && MEInput.getText().equals("") && RAInput.getText().equals("") && SEInput.getText().equals("")
                && WAInput.getText().equals("") && WUInput.getText().equals("") && ZRInput.getText().equals("")) {
            tombolBatal.setEnabled(false);
        } else {
            tombolBatal.setEnabled(true);
        }
    }

    private void tombolHasilCetakEnableFalse() {
        if (!namaInput.getText().equals("") && !ANInput.getText().equals("") && !FAInput.getText().equals("") && !GEInput.getText().equals("")
                && !IQInput.getText().equals("") && !MEInput.getText().equals("") && !RAInput.getText().equals("") && !SEInput.getText().equals("")
                && !WAInput.getText().equals("") && !WUInput.getText().equals("") && !ZRInput.getText().equals("")) {
            tombolHasil.setEnabled(true);
//            tombolCetak.setEnabled(true);
        } else {
            tombolHasil.setEnabled(false);
//            tombolCetak.setEnabled(false);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ANInput;
    private javax.swing.JLabel ANLabel;
    private javax.swing.JTextField FAInput;
    private javax.swing.JLabel FALabel;
    private javax.swing.JTextField GEInput;
    private javax.swing.JLabel GELabel;
    private javax.swing.JTextField IQInput;
    private javax.swing.JLabel IQLabel;
    private javax.swing.JTextField MEInput;
    private javax.swing.JLabel MELabel;
    private javax.swing.JPanel MainFrame;
    private javax.swing.JTextField RAInput;
    private javax.swing.JLabel RALabel;
    private javax.swing.JTextField SEInput;
    private javax.swing.JLabel SELabel;
    private javax.swing.JTextField WAInput;
    private javax.swing.JLabel WALabel;
    private javax.swing.JTextField WUInput;
    private javax.swing.JLabel WULabel;
    private javax.swing.JTextField ZRInput;
    private javax.swing.JLabel ZRLabel;
    private javax.swing.JPanel controller;
    private javax.swing.JPanel hasil;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel judul;
    private javax.swing.JPanel masukan;
    private javax.swing.JTextField namaInput;
    private javax.swing.JLabel namaLabel;
    private javax.swing.JTable tabelHasil;
    private com.toedter.calendar.JCalendar tanggalController;
    private javax.swing.JButton tombolBatal;
    private javax.swing.JButton tombolCetak;
    private javax.swing.JButton tombolEdit;
    private javax.swing.JButton tombolHasil;
    private javax.swing.JButton tombolKeluar;
    // End of variables declaration//GEN-END:variables
}
