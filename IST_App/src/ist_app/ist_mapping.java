/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ist_app;

import common.MainFrame;
import ist_app.resource.KomponenPenilaian;
import ist_app.resource.KomponenPenilaianTableModel;
import ist_app.resource.NilaiRubrik;
import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import ist_app.resource.IST_ScoreInterpreter;
import ist_app.resource.IST_ScoreInterpreter.Result;
import java.io.InputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPasswordField;
import net.sf.jasperreports.engine.JREmptyDataSource;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author nicol
 */
public class ist_mapping extends javax.swing.JPanel {

    private List<KomponenPenilaian> nilai = new ArrayList<>();
    IST_ScoreInterpreter tarKecerdasan, berpikirKompreheren, kemAnalisis, dayaIngat, kreativitas, menilai, mengambilKeputusan, berbahasa, angka;
    LinkedList<String> fleksibel, jenisKecerdasan, coraBerpikir;
    private HashMap<String, String> charNilai = new HashMap<>();

    public void setNilai(List<KomponenPenilaian> nilai) {
        this.nilai = nilai;
    }

    private List<NilaiRubrik> nilaiRubrik = new ArrayList<>();
    String charIQ;
    int pilihan = 0;
    private String nil = "";
    private String Kategori = "";
    private String deskripsi = "";

    /**
     * Creates new form ist_mapping
     */
    public ist_mapping() {
        initComponents();
        tombolBatal.setEnabled(false);
        tombolHasil.setEnabled(false);
        tombolCetak.setEnabled(false);
        tombolUbah.setEnabled(true);
        setDate();
        resetTable();
        initializeIntepretations();
        inisiasill();
        text2ll();
    }

    private void setDate() {
        tanggalController.setDate(new Date());
    }

    private void resetTable() {
        nilai = new ArrayList<>();
        try {
            KomponenPenilaianTableModel model = new KomponenPenilaianTableModel(nilai);
            tabelHasil.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Data gagal ditampilkan");
        }

        setTableProperties();
    }

    private void setTableProperties() {
//        tabelHasil.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tabelHasil.getColumnModel().getColumn(0).setPreferredWidth(600);
        tabelHasil.getColumnModel().getColumn(1).setPreferredWidth(200);
        tabelHasil.getColumnModel().getColumn(2).setPreferredWidth(200);
        tabelHasil.getColumnModel().getColumn(3).setPreferredWidth(1000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        judul = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        masukan = new javax.swing.JPanel();
        namaLabel = new javax.swing.JLabel();
        namaInput = new javax.swing.JTextField();
        IQLabel = new javax.swing.JLabel();
        SELabel = new javax.swing.JLabel();
        WALabel = new javax.swing.JLabel();
        ANLabel = new javax.swing.JLabel();
        GELabel = new javax.swing.JLabel();
        MELabel = new javax.swing.JLabel();
        RALabel = new javax.swing.JLabel();
        ZRLabel = new javax.swing.JLabel();
        FALabel = new javax.swing.JLabel();
        WULabel = new javax.swing.JLabel();
        FAInput = new javax.swing.JTextField();
        WUInput = new javax.swing.JTextField();
        RAInput = new javax.swing.JTextField();
        ZRInput = new javax.swing.JTextField();
        GEInput = new javax.swing.JTextField();
        MEInput = new javax.swing.JTextField();
        WAInput = new javax.swing.JTextField();
        ANInput = new javax.swing.JTextField();
        IQInput = new javax.swing.JTextField();
        SEInput = new javax.swing.JTextField();
        tanggalController = new com.toedter.calendar.JDateChooser();
        controller = new javax.swing.JPanel();
        tombolBatal = new javax.swing.JButton();
        tombolHasil = new javax.swing.JButton();
        tombolCetak = new javax.swing.JButton();
        tombolKeluar = new javax.swing.JButton();
        tombolUbah = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelHasil = new javax.swing.JTable();

        judul.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel1.setFont(new java.awt.Font("Arial", 0, 48)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("IST MAPPING");

        javax.swing.GroupLayout judulLayout = new javax.swing.GroupLayout(judul);
        judul.setLayout(judulLayout);
        judulLayout.setHorizontalGroup(
            judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 831, Short.MAX_VALUE)
            .addGroup(judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(judulLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 819, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        judulLayout.setVerticalGroup(
            judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 68, Short.MAX_VALUE)
            .addGroup(judulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(judulLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel1)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        masukan.setBorder(javax.swing.BorderFactory.createTitledBorder("Masukan"));
        masukan.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        namaLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaLabel.setText("Nama");

        namaInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        namaInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                namaInputActionPerformed(evt);
            }
        });
        namaInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                namaInputKeyReleased(evt);
            }
        });

        IQLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        IQLabel.setText("IQ");

        SELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SELabel.setText("SE");

        WALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WALabel.setText("WA");

        ANLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ANLabel.setText("AN");

        GELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GELabel.setText("GE");

        MELabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MELabel.setText("ME");

        RALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RALabel.setText("RA");

        ZRLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ZRLabel.setText("ZR");

        FALabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FALabel.setText("FA");

        WULabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WULabel.setText("WU");

        FAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        FAInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                FAInputKeyReleased(evt);
            }
        });

        WUInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WUInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                WUInputKeyReleased(evt);
            }
        });

        RAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        RAInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                RAInputKeyReleased(evt);
            }
        });

        ZRInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ZRInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ZRInputKeyReleased(evt);
            }
        });

        GEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        GEInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                GEInputKeyReleased(evt);
            }
        });

        MEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        MEInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                MEInputKeyReleased(evt);
            }
        });

        WAInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        WAInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                WAInputKeyReleased(evt);
            }
        });

        ANInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        ANInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                ANInputKeyReleased(evt);
            }
        });

        IQInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        IQInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IQInputActionPerformed(evt);
            }
        });
        IQInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                IQInputKeyReleased(evt);
            }
        });

        SEInput.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        SEInput.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SEInputKeyReleased(evt);
            }
        });

        tanggalController.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tanggalControllerKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout masukanLayout = new javax.swing.GroupLayout(masukan);
        masukan.setLayout(masukanLayout);
        masukanLayout.setHorizontalGroup(
            masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(masukanLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(namaLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(namaInput, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE)
                .addGap(24, 24, 24)
                .addComponent(tanggalController, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
                .addGap(23, 23, 23))
            .addGroup(masukanLayout.createSequentialGroup()
                .addGap(190, 190, 190)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SELabel, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(IQLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(SEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(IQInput, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(WALabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(ANLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ANInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(WAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MELabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(GELabel, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(MEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(GEInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(masukanLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(RALabel))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, masukanLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(ZRLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ZRInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(RAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(FALabel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WULabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(WUInput, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                    .addComponent(FAInput, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        masukanLayout.setVerticalGroup(
            masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(masukanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(namaLabel)
                    .addComponent(namaInput)
                    .addComponent(tanggalController, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(FALabel)
                    .addComponent(RAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RALabel)
                    .addComponent(GEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(GELabel)
                    .addComponent(WAInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WALabel)
                    .addComponent(IQInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(IQLabel))
                .addGap(7, 7, 7)
                .addGroup(masukanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(WUInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(WULabel)
                    .addComponent(ZRInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ZRLabel)
                    .addComponent(MEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(MELabel)
                    .addComponent(ANInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ANLabel)
                    .addComponent(SEInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SELabel))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        controller.setBorder(javax.swing.BorderFactory.createTitledBorder("Aksi"));

        tombolBatal.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolBatal.setText("Batal");
        tombolBatal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolBatalActionPerformed(evt);
            }
        });

        tombolHasil.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolHasil.setText("Hasil");
        tombolHasil.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolHasilActionPerformed(evt);
            }
        });

        tombolCetak.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolCetak.setText("Cetak");
        tombolCetak.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolCetakActionPerformed(evt);
            }
        });

        tombolKeluar.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolKeluar.setText("Keluar");
        tombolKeluar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolKeluarActionPerformed(evt);
            }
        });

        tombolUbah.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tombolUbah.setText("Ubah");
        tombolUbah.setMaximumSize(new java.awt.Dimension(78, 31));
        tombolUbah.setMinimumSize(new java.awt.Dimension(78, 31));
        tombolUbah.setPreferredSize(new java.awt.Dimension(78, 31));
        tombolUbah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tombolUbahActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controllerLayout = new javax.swing.GroupLayout(controller);
        controller.setLayout(controllerLayout);
        controllerLayout.setHorizontalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controllerLayout.createSequentialGroup()
                .addContainerGap(95, Short.MAX_VALUE)
                .addComponent(tombolBatal, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolHasil, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolCetak, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolUbah, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tombolKeluar, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90))
        );
        controllerLayout.setVerticalGroup(
            controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controllerLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(controllerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tombolBatal)
                        .addComponent(tombolHasil)
                        .addComponent(tombolCetak)
                        .addComponent(tombolKeluar))
                    .addComponent(tombolUbah, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        tabelHasil.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        tabelHasil.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Variabel", "Nilai", "Kategori", "Deskripsi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelHasil.setToolTipText("");
        tabelHasil.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelHasil.setRowHeight(30);
        tabelHasil.setShowHorizontalLines(true);
        tabelHasil.setShowVerticalLines(true);
        tabelHasil.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                tabelHasilMouseMoved(evt);
            }
        });
        jScrollPane1.setViewportView(tabelHasil);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(judul, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(masukan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(controller, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(judul, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(masukan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controller, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addGap(35, 35, 35))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void namaInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_namaInputKeyReleased

    }//GEN-LAST:event_namaInputKeyReleased

    private void FAInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_FAInputKeyReleased
        try {
            if (!FAInput.getText().equals("")) {
                int data = Integer.parseInt(FAInput.getText());
            }
        } catch (NumberFormatException eror) {
            FAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_FAInputKeyReleased

    private void WUInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WUInputKeyReleased
        try {
            if (!WUInput.getText().equals("")) {
                int data = Integer.parseInt(WUInput.getText());
            }
        } catch (NumberFormatException eror) {
            WUInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_WUInputKeyReleased

    private void RAInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RAInputKeyReleased
        try {
            if (!RAInput.getText().equals("")) {
                int data = Integer.parseInt(RAInput.getText());
            }
        } catch (NumberFormatException eror) {
            RAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_RAInputKeyReleased

    private void ZRInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ZRInputKeyReleased
        try {
            if (!ZRInput.getText().equals("")) {
                int data = Integer.parseInt(ZRInput.getText());
            }
        } catch (NumberFormatException eror) {
            ZRInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_ZRInputKeyReleased

    private void GEInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_GEInputKeyReleased
        try {
            if (!GEInput.getText().equals("")) {
                int data = Integer.parseInt(GEInput.getText());
            }
        } catch (NumberFormatException eror) {
            GEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_GEInputKeyReleased

    private void MEInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MEInputKeyReleased
        try {
            if (!MEInput.getText().equals("")) {
                int data = Integer.parseInt(MEInput.getText());
            }
        } catch (NumberFormatException eror) {
            MEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_MEInputKeyReleased

    private void WAInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_WAInputKeyReleased
        try {
            if (!WAInput.getText().equals("")) {
                int data = Integer.parseInt(WAInput.getText());
            }
        } catch (NumberFormatException eror) {
            WAInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_WAInputKeyReleased

    private void ANInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ANInputKeyReleased
        try {
            if (!ANInput.getText().equals("")) {
                int data = Integer.parseInt(ANInput.getText());
            }
        } catch (NumberFormatException eror) {
            ANInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_ANInputKeyReleased

    private void IQInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IQInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IQInputActionPerformed

    private void IQInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_IQInputKeyReleased
        try {
            if (!IQInput.getText().equals("")) {
                int data = Integer.parseInt(IQInput.getText());
            }
        } catch (NumberFormatException e) {
            IQInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }

        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_IQInputKeyReleased

    private void SEInputKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SEInputKeyReleased
        try {
            if (!SEInput.getText().equals("")) {
                int data = Integer.parseInt(SEInput.getText());
            }
        } catch (NumberFormatException eror) {
            SEInput.setText("");
            JOptionPane.showMessageDialog(this, "Nilai harus angka!", "Error", ERROR_MESSAGE);
        }
        tombolBatalEnableFalse();
        tombolHasilCetakEnableFalse();
    }//GEN-LAST:event_SEInputKeyReleased

    private void tombolBatalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolBatalActionPerformed
        setDate();
        clearAllComp();
        resetTable();
        tombolHasil.setEnabled(false);
        tombolBatal.setEnabled(false);
        tombolCetak.setEnabled(false);
    }//GEN-LAST:event_tombolBatalActionPerformed

    private void tombolHasilActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolHasilActionPerformed
        //menampilkan hasil dari input ke dalam tabel
        evalTarKecerdasan();
        evalAnalisa();
        evalKomperehensif();
        evalDayaIngat();
        evalMengolahAngka();
        evalBahasa();
        evalKreativitas();
        evalMenilai();
        evalKeputusan();
        evalBerpikir();
        evalfleksibel();
        evalJenisKecerdasan();

        refreshTable();

        tombolCetak.setEnabled(true);
        tombolUbah.setEnabled(true);

        JOptionPane.showMessageDialog(this, "Berhasil");
    }//GEN-LAST:event_tombolHasilActionPerformed

    private void tombolCetakActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolCetakActionPerformed
        //Mencetak hasil input ke dalam jasper file
        String fileName = "ist_app/ISTReport.jasper";
        //String fileName = "ist_app/formIST.jasper";
        //String fileName = "ist_app/hasil.jasper";
        //        String outFile = "./Report" + " - " + namaInput.getText() + ".pdf";
        //        String outFile = "C:/FormIST/Report" + " - " + namaInput.getText() + ".pdf";

        SimpleDateFormat originalFormat = new SimpleDateFormat("E MMM dd HH:mm:ss z yyyy");
        String formattedDate = "";
        SimpleDateFormat newFormat = new SimpleDateFormat("dd MMMM yyyy");

        try {
            Date date = originalFormat.parse(tanggalController.getDate().toString());

            formattedDate = newFormat.format(date);
        } catch (ParseException e) {
            e.printStackTrace();
        }

        Map<String, Object> parameter = new HashMap<String, Object>();

        JRBeanCollectionDataSource studentCollectionDataSource
                = new JRBeanCollectionDataSource(nilai);

        parameter.put("datapenilaian", studentCollectionDataSource);
        parameter.put("nama", namaInput.getText());
        parameter.put("tanggal", formattedDate);

        //tabel rw
        parameter.put("iq", IQInput.getText());
        parameter.put("charIQ", charIQ);
        parameter.put("rwse", SEInput.getText());
        parameter.put("rwwa", WAInput.getText());
        parameter.put("rwan", ANInput.getText());
        parameter.put("rwge", GEInput.getText());
        parameter.put("rwme", MEInput.getText());
        parameter.put("rwra", RAInput.getText());
        parameter.put("rwzr", ZRInput.getText());
        parameter.put("rwfa", FAInput.getText());
        parameter.put("rwwu", WUInput.getText());

        //tabel kua
        String[] key = {"kuase", "kuawa", "kuaan", "kuage", "kuame", "kuara", "kuazr", "kuafa", "kuawu"};

        for (int i = 0; i < key.length - 1; i++) {
            System.out.println(key[i] + ": " + charNilai.get(key[i]));
            parameter.put(key[i], charNilai.get(key[i]));
        }

        try {
            //            InputStream stream = Main.class.getResourceAsStream(fileName);
            //            JOptionPane.showMessageDialog(this, "aaa!");
            //            JasperReport jasperDesign = JasperCompileManager.compileReport(stream);
            //            JOptionPane.showMessageDialog(this, "bbb!");
            //            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperDesign, parameter,
            //                    new JREmptyDataSource());

            InputStream stream = Main.class.getResourceAsStream(fileName);
            JasperPrint jasperPrint = JasperFillManager.fillReport(
                    ClassLoader.getSystemResourceAsStream(fileName), parameter,
                    new JREmptyDataSource());

            //            File file = new File(outFile);
            //            OutputStream outputSteam = new FileOutputStream(file);
            //            JasperExportManager.exportReportToPdfStream(jasperPrint, outputSteam);
            //            outputSteam.close();
            JOptionPane.showMessageDialog(this, "Berhasil!");
            bersihkan();
            JasperViewer.viewReport(jasperPrint, false);
            //            System.out.println("Data: ");
            //            for (int i = 0; i < nilai.size(); i++) {
            //                System.out.println(nilai.get(i));
            //            }
        } catch (JRException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tombolCetakActionPerformed

    private void tombolKeluarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolKeluarActionPerformed
        //keluar dari panel ist dan kembali ke main
        int pilih = JOptionPane.showConfirmDialog(this, "Apakah anda yakin akan keluar?", null, JOptionPane.YES_NO_OPTION);
        if (pilih == JOptionPane.YES_NO_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_tombolKeluarActionPerformed

    private void tombolUbahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tombolUbahActionPerformed
        //input form for password

        JPasswordField passwordField = new JPasswordField();
        Object[] message = {"Masukkan Password: ", passwordField};
        String real = "12345";
        int option = 0;

        do {
            option = JOptionPane.showConfirmDialog(this, message, "Konfirmasi untuk mengubah", JOptionPane.OK_CANCEL_OPTION);

            if (option == JOptionPane.OK_OPTION) {
                String pw = new String(passwordField.getPassword());

                if (pw.equals(real)) {
                    JOptionPane.showMessageDialog(null, "Berhasil masuk");
                    //mengubah isi file rubrik
                    EditForm dialog = new EditForm(null, true);
                    dialog.setVisible(true);
                } else {
                    JOptionPane.showMessageDialog(null, "Gagal masuk");
                }
            } else {
                break;
            }

        } while (!(real.equals(new String(passwordField.getPassword()))));
        bersihkan();
        inisiasill();
        text2ll();
        initializeIntepretations();
    }//GEN-LAST:event_tombolUbahActionPerformed

    private void tabelHasilMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelHasilMouseMoved
        // TODO add your handling code here:
        // Set the tooltip to an empty string
        tabelHasil.setToolTipText("");

        // Get the table cell value where the mouse is located
        String value = (String) tabelHasil.getValueAt(tabelHasil.rowAtPoint(evt.getPoint()),
                tabelHasil.columnAtPoint(evt.getPoint()));

        // If the length of the value is greater than some number...
        //        if (value.length() > 50) {
        // add a tooltip to the JTable that shows the value
        tabelHasil.setToolTipText(value);
        //        }
    }//GEN-LAST:event_tabelHasilMouseMoved

    private void namaInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_namaInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_namaInputActionPerformed

    private void tanggalControllerKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tanggalControllerKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tanggalControllerKeyReleased

    private void refreshTable() {
        try {
            KomponenPenilaianTableModel model = new KomponenPenilaianTableModel(nilai);
            tabelHasil.setModel(model);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Data gagal ditampilkan");
        }

        setTableProperties();
    }

    private void clearAllComp() {
        namaInput.setText("");
        setDate();
        IQInput.setText("");
        SEInput.setText("");
        WAInput.setText("");
        ANInput.setText("");
        GEInput.setText("");
        MEInput.setText("");
        RAInput.setText("");
        ZRInput.setText("");
        FAInput.setText("");
        WUInput.setText("");
        resetTable();
    }

    private void tombolBatalEnableFalse() {
        if (tanggalController.getCalendar().equals("") && namaInput.getText().equals("") && ANInput.getText().equals("") && FAInput.getText().equals("") && GEInput.getText().equals("")
                && IQInput.getText().equals("") && MEInput.getText().equals("") && RAInput.getText().equals("") && SEInput.getText().equals("")
                && WAInput.getText().equals("") && WUInput.getText().equals("") && ZRInput.getText().equals("")) {
            tombolBatal.setEnabled(false);
        } else {
            tombolBatal.setEnabled(true);
        }
    }

    private void tombolHasilCetakEnableFalse() {
        if (!tanggalController.getCalendar().equals("") && !namaInput.getText().equals("") && !ANInput.getText().equals("") && !FAInput.getText().equals("") && !GEInput.getText().equals("")
                && !IQInput.getText().equals("") && !MEInput.getText().equals("") && !RAInput.getText().equals("") && !SEInput.getText().equals("")
                && !WAInput.getText().equals("") && !WUInput.getText().equals("") && !ZRInput.getText().equals("")) {
            tombolHasil.setEnabled(true);
        } else {
            tombolHasil.setEnabled(false);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ANInput;
    private javax.swing.JLabel ANLabel;
    private javax.swing.JTextField FAInput;
    private javax.swing.JLabel FALabel;
    private javax.swing.JTextField GEInput;
    private javax.swing.JLabel GELabel;
    private javax.swing.JTextField IQInput;
    private javax.swing.JLabel IQLabel;
    private javax.swing.JTextField MEInput;
    private javax.swing.JLabel MELabel;
    private javax.swing.JTextField RAInput;
    private javax.swing.JLabel RALabel;
    private javax.swing.JTextField SEInput;
    private javax.swing.JLabel SELabel;
    private javax.swing.JTextField WAInput;
    private javax.swing.JLabel WALabel;
    private javax.swing.JTextField WUInput;
    private javax.swing.JLabel WULabel;
    private javax.swing.JTextField ZRInput;
    private javax.swing.JLabel ZRLabel;
    private javax.swing.JPanel controller;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel judul;
    private javax.swing.JPanel masukan;
    private javax.swing.JTextField namaInput;
    private javax.swing.JLabel namaLabel;
    private javax.swing.JTable tabelHasil;
    private com.toedter.calendar.JDateChooser tanggalController;
    private javax.swing.JButton tombolBatal;
    private javax.swing.JButton tombolCetak;
    private javax.swing.JButton tombolHasil;
    private javax.swing.JButton tombolKeluar;
    private javax.swing.JButton tombolUbah;
    // End of variables declaration//GEN-END:variables

    void inisiasill() {
        coraBerpikir = new LinkedList<>();
        jenisKecerdasan = new LinkedList<>();
        fleksibel = new LinkedList<>();
    }

    private void bersihkan() {
        resetTable();
        tombolBatal.setEnabled(false);
        tombolHasil.setEnabled(false);
        tombolCetak.setEnabled(false);
        namaInput.setText("");
        ANInput.setText("");
        FAInput.setText("");
        GEInput.setText("");
        IQInput.setText("");
        MEInput.setText("");
        RAInput.setText("");
        SEInput.setText("");
        WAInput.setText("");
        WUInput.setText("");
        ZRInput.setText("");
    }

    private void evalTarKecerdasan() {
        int scoreIQ = Integer.parseInt(IQInput.getText()); //Taraf Kecerdasan
        nil = IQInput.getText();

        Result hasil = this.tarKecerdasan.interpret(scoreIQ);
        System.out.println("hasil Taraf Kecerdasan: " + hasil);
        this.nilai.add(new KomponenPenilaian("Taraf Kecerdasan", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("IQ", hasil.getKategori());
    }

    private void evalAnalisa() {
        double ANWU = (Double.parseDouble(ANInput.getText()) + Double.parseDouble(WUInput.getText())) / 2; //Kemampuan analisis
        nil = String.valueOf(ANWU);

        Result hasil = this.kemAnalisis.interpret(ANWU);
        System.out.println("Hasil kemampuan analisis: " + hasil);
        this.nilai.add(new KomponenPenilaian("Kemampuan analisis", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("kuase", hasil.getKategori());
    }

    private void evalKomperehensif() {

        double GEFA = (Double.parseDouble(GEInput.getText()) + Double.parseDouble(FAInput.getText())) / 2; //Kemampuan berpikir komprehensif
        nil = String.valueOf(GEFA);

        Result hasil = this.berpikirKompreheren.interpret(GEFA);
        System.out.println("Hasil Berpikir Komperehensif: " + hasil);
        this.nilai.add(new KomponenPenilaian("Kemampuan berpikir komprehensif", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("kuawa", hasil.getKategori());
    }

    private void evalDayaIngat() {
        int ME = Integer.parseInt(MEInput.getText()); //Daya ingat
        nil = MEInput.getText();

        Result hasil = this.dayaIngat.interpret(ME);
        System.out.println("Hasil Daya Ingat: " + hasil);
        this.nilai.add(new KomponenPenilaian("Daya Ingat", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("kuaan", hasil.getKategori());
    }

    private void evalMengolahAngka() {
        double RAZR = (Double.parseDouble(RAInput.getText()) + Double.parseDouble(ZRInput.getText())) / 2; //Kemampuan berhitung / mengolah angka
        nil = String.valueOf(RAZR);

        Result hasil = this.angka.interpret(RAZR);
        System.out.println("Hasil Mengolah angka: " + hasil);
        this.nilai.add(new KomponenPenilaian("Kemampuan berhitung / mengolah angka", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("kuage", hasil.getKategori());
    }

    private void evalBahasa() {
        double WAGE = (Double.parseDouble(WAInput.getText()) + Double.parseDouble(GEInput.getText())) / 2; //Kemampuan berbahasa
        nil = String.valueOf(WAGE);

        Result hasil = this.berbahasa.interpret(WAGE);
        System.out.println("Hasil Berbahasa: " + hasil);
        this.nilai.add(new KomponenPenilaian("Kemampuan berbahasa", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("kuame", hasil.getKategori());
    }

    private void evalKreativitas() {
        double FAWU = (Double.parseDouble(FAInput.getText()) + Double.parseDouble(WUInput.getText())) / 2; //Kreativitas
        nil = String.valueOf(FAWU);

        Result hasil = this.kreativitas.interpret(FAWU);
        System.out.println("Hasil Kreativitas: " + hasil);
        this.nilai.add(new KomponenPenilaian("Kreativitas", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("kuara", hasil.getKategori());
    }

    private void evalMenilai() {
        int SE = Integer.parseInt(SEInput.getText()); //Kemampuan menilai
        nil = SEInput.getText();

        Result hasil = this.menilai.interpret(SE);
        System.out.println("Hasil Menilai: " + hasil);
        this.nilai.add(new KomponenPenilaian("Kemampuan menilai", nil, hasil.getKategori(), hasil.getDeskripsi()));
        charNilai.put("kuazr", hasil.getKategori());
    }

    private void evalKeputusan() {
        double SEANWURAZR = (Double.parseDouble(SEInput.getText()) + Double.parseDouble(ANInput.getText())
                + Double.parseDouble(WUInput.getText()) + Double.parseDouble(RAInput.getText()) + Double.parseDouble(ZRInput.getText())) / 5; //Kemampuan mengambil keputusan
        nil = String.valueOf(SEANWURAZR);

        //charNilai.put("kuafa", hasil.getKategori());
        //Result hasil = this.mengambilKeputusan.interpret(SEANWURAZR);
        //System.out.println("Hasil Mengambil Keputusan: " + hasil);
    }

    private void evalBerpikir() { //corak/cara berpikir
        double nilaiGE = Double.parseDouble(GEInput.getText());
        double nilaiRA = Double.parseDouble(RAInput.getText());
        double nilaiGERA = nilaiGE + nilaiRA;
        double nilaiAN = Double.parseDouble(ANInput.getText());
        double nilaiZR = Double.parseDouble(ZRInput.getText());
        double nilaiANZR = nilaiAN + nilaiZR;
        double toleransi = 0.5;

        double[] nils = {nilaiGE, nilaiRA, nilaiAN, nilaiZR};

        if (nilaiGERA > nilaiANZR) { //ga tau nilainya apa ini
            Kategori = "Birokratis-normatif";
            deskripsi = coraBerpikir.get(0);
        } else if (nilaiGERA < nilaiANZR) {
            Kategori = "Fleksibel";
            deskripsi = coraBerpikir.get(1);
        } else if (Math.abs(nilaiGERA + nilaiANZR) <= toleransi) {
            Kategori = "Belum terarah-belum konsisten";
            deskripsi = coraBerpikir.get(2);
        }

        KomponenPenilaian variabel10 = new KomponenPenilaian("Cara/Corak berpikir", "", "", deskripsi);
        nilai.add(variabel10);
        charNilai.put("kuawu", Kategori);
    }

    private void evalfleksibel() { // Kemampuan berpikir fleksibel
        double nilaiGERA = Double.parseDouble(GEInput.getText()) + Double.parseDouble(RAInput.getText());
        double nilaiANZR = Double.parseDouble(ANInput.getText()) + Double.parseDouble(ZRInput.getText());
        double hasil = nilaiGERA - nilaiANZR;

        if (hasil == (-10)) {

        } else if (hasil == 10) {

        } else {

        }

    }

    private void evalJenisKecerdasan() {
        double nilaiWAGE = Double.parseDouble(WAInput.getText()) + Double.parseDouble(GEInput.getText());
        double nilaiSEAN = Double.parseDouble(SEInput.getText()) + Double.parseDouble(ANInput.getText());
        
        if (nilaiWAGE > nilaiSEAN) {
            Kategori = "Tipe pemikiran teoritis-konseptual";
            deskripsi = jenisKecerdasan.get(0);
        } else if (nilaiSEAN > nilaiWAGE) {
            Kategori = "Tipe pemikiran praktis";
            deskripsi = jenisKecerdasan.get(1);
        }
        nilai.add(new KomponenPenilaian("Jenis kecerdasan", "", Kategori, deskripsi));
    }

    private void initializeIntepretations() {
        //taraf kecerdasan
        double[] lowerVal = {0, 84, 90, 99, 110, 120, 130};
        double[] upperVal = {83, 89, 98, 109, 119, 129, Integer.MAX_VALUE};
        String[] kategori = {"KS", "K", "C-", "C", "C+", "B", "BS"};

        this.tarKecerdasan = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/taraf kecerdasan.txt", upperVal, lowerVal, kategori
        );

        this.kemAnalisis = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan analisis.txt", upperVal, lowerVal, kategori
        );

        this.dayaIngat = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/daya ingat.txt", upperVal, lowerVal, kategori
        );

        this.berpikirKompreheren = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan berpikir kompreherensif.txt", upperVal, lowerVal, kategori
        );

        this.kreativitas = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kreativitas.txt", upperVal, lowerVal, kategori
        );

        this.menilai = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan menilai.txt", upperVal, lowerVal, kategori
        );

        //error - duplication value with unreasonable things
//        this.mengambilKeputusan = new IST_ScoreInterpreter(
//        "./src/ist_app/resource/rubrik/kemampuan mengambil keputusan.txt", upperVal, lowerVal, kategori
//        );
        this.berbahasa = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kemampuan berbahasa.txt", upperVal, lowerVal, kategori
        );

        this.kreativitas = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/kreativitas.txt", upperVal, lowerVal, kategori
        );

        this.angka = new IST_ScoreInterpreter(
                "./src/ist_app/resource/rubrik/Kemampuan berhitung n mengolah angka.txt", upperVal, lowerVal, kategori
        );
    }

    void text2ll() {
        String file2 = "./src/ist_app/rubrik/corak berpikir.txt";
        loadRubrikFile(file2, coraBerpikir);
        String file10 = "./src/ist_app/rubrik/jenis kecerdasan.txt";
        loadRubrikFile(file10, jenisKecerdasan);
        String file11 = "./src/ist_app/rubrik/kemampuan berfikir fleksibel.txt";
        loadRubrikFile(file11, fleksibel);
        String file12 = "./src/ist_app/rubrik/Kemampuan berhitung n mengolah angka.txt";

    }

    void loadRubrikFile(String filename, LinkedList<String> ll) {
        try {
            BufferedReader br = new BufferedReader(new FileReader(filename));
            String docs;
            StringBuilder fullcontent = new StringBuilder();

            while ((docs = br.readLine()) != null) {
                String teks = br.toString();
                String[] oneLine = docs.split(";");

                for (int i = 0; i < oneLine.length; i++) {
                    ll.add(oneLine[i]);
                }
            }

        } catch (Exception e) {
            System.out.println("error");
        }
    }
}
